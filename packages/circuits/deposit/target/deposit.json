{"noir_version":"1.0.0-beta.1+03b58fa2dfcc8acc8cf5198b1b23b55676fbdb02","hash":17834793542570432884,"abi":{"parameters":[{"name":"receiver_account","type":{"kind":"field"},"visibility":"private"},{"name":"in_commitment_root","type":{"kind":"field"},"visibility":"public"},{"name":"out_receiver_commitment_value","type":{"kind":"field"},"visibility":"private"},{"name":"out_receiver_commitment_bliding","type":{"kind":"field"},"visibility":"private"},{"name":"out_receiver_commitment","type":{"kind":"field"},"visibility":"public"},{"name":"out_root","type":{"kind":"field"},"visibility":"public"},{"name":"out_subtree_root_path","type":{"kind":"array","length":11,"type":{"kind":"field"}},"visibility":"private"},{"name":"out_subtree_root_direction_selector","type":{"kind":"array","length":11,"type":{"kind":"boolean"}},"visibility":"private"}],"return_type":null,"error_types":{"624257843267711912":{"error_kind":"string","string":"New commits not included in new root"},"11889370444656604730":{"error_kind":"string","string":"Invalid out receiver commitment"},"16860811455173349640":{"error_kind":"string","string":"Missing commitments from old tree in new tree"}}},"bytecode":"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","debug_symbols":"7ZzdbuIwEIXfJde9sD22Y/Mqq1VFKa2QEFRAV1pVffelLGnJKbTqkLmJzmXAMwofo3xH+Xtp7ud3z4+3i9XDettMfr00y/VsulusV/utl8bL4bPt03T1trndTTe7ZiIp3zTz1X0zicG93jQPi+W8mYT8evNpaWhDtza08ZvFvi1yXOyLC98sdu+dvWvT14vbVI5rS/rYiRzOLBVxx6WSP3Yhx9ffN42PxHGKI53DcdK8yGnzt4p8rsJ7V7t99+KwplXUFEVN/XlNcIoar6gJihpR1ERFTVLUKOYgKOYgKOYgKOZAFHMgijkQxRyIYg5EMQeimANRzIEo5kAUcyAX5iC695qT4+z/mugUNV5RExQ1oqiJipqkqMmKmlZRUxQ1ijlIijlI5+fAxU6nPuT8jaxjN8/SnoxzOrQP17cvXcSQKtherm4fo+9yVCzYfiTJ62dA2u7vTM4jkEQgfSCZQPpAWgLpAym2B9hqeoDNzvQAm71t+8Bh7AMZyZmV4YBEAukDoeEBCA0PQGh4AGJr+Gxr+NbZtrc1fBts29OXAIS+BCD0JQChLwEIfQlACoH0gVTTAFFsDV+8bXtbwxfbM8iFvgQg9CUAoS8BCH0JQOhLAFIJpAekOtMAUW0NX22vEVdbw9do256+BCD0JQChLwEIfQlA6Ms+EO8ciQAR2/vA9r/KVPLeiXH/aKp575Jxf2oTidCbSITiRCI0JxDxNCcS8SQCRIJtlvDGrvfRuL+x6y887zZcf5oTidCcSITmBCKB5kQiNCcS4Q3rSERss0Qwdn1Ixv2NXX/h+efh+tOcSITmBCJCcyIRmhOJ0JxIhPeuI5FomyXE2PWSjfsbu16KcX+aE4hEmhOJ0JxIhOZEIjQnEokkAkSSbZaIxq6PrXF/Y9fHats/0ZxIhOZEIjQnEqE5kQjNiUR4RzsSybZZIhm7fohXXH3Z39j1xi+58pnmRCI0JxKhOZEIzYlEaE4kwrvakcj1rk+hc1mS9Kn/WK7XS0rdYqnhlMjhZ47lUoLU9z8+1WsGqx3LCZHhiIwl1g1HZCyxbjgiY4l1wxGJJAJExhLrhiMyllg3HJGxPHIxHJHRBNHBiDCzApHCzIpEmFmRCDMrEmFmRSKRRIAIMysSYWZFIsysSISZFYkwswKRysyKRJhZkQgzKxJhZkUikUSACDMrEmFmRSLMrEiEmRWJMLP2iYTRvE51OCLMrEiEmRWJMLMikUgiQISZFYkwsyIRZlYkwsyKRJhZgchoXmQ8HBFmViTCzIpEzr+O8Sf9Lz9esN+42yyWy8Xj7XI9m+4W69V2X7j/+M90s5jeLefHzYfn1ezk293fp+6brv5ps57N758387dOh+/27f8B","file_map":{"26":{"source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"62":{"source":"use common::definitions::{account, commitment};\nuse common::merkle_tree::{assert_merkle_inclusion};\nuse std::hash::poseidon2::Poseidon2::hash;\n\n// TODO: update before deploying. So far haven't found way to override for testing\nglobal DEPTH: u32 = 12;\n\npub fn main(\n    // accounts details\n    receiver_account: Field,\n    // utxo inputs\n    in_commitment_root: pub Field,\n    // utxo outputs\n    out_receiver_commitment_value: Field,\n    out_receiver_commitment_bliding: Field,\n    out_receiver_commitment: pub Field,\n    // updated root\n    out_root: pub Field,\n    out_subtree_root_path: [Field; DEPTH - 1],\n    out_subtree_root_direction_selector: [bool; DEPTH - 1],\n) {\n    // validate commitment amounts and receivers are correct\n    assert_eq(\n        commitment(receiver_account, out_receiver_commitment_value, out_receiver_commitment_bliding),\n        out_receiver_commitment,\n            \"Invalid out receiver commitment\",\n    );\n\n    // check we're inserting in a previously empty subtree\n    let zero_subtree_root = hash([0, 0], 2);\n    assert_merkle_inclusion(\n        in_commitment_root,\n        out_subtree_root_path,\n        out_subtree_root_direction_selector,\n        zero_subtree_root,\n        \"Missing commitments from old tree in new tree\",\n    );\n\n    // check newly inserted commitments belong to out_root\n    let new_subtree_root = hash([out_receiver_commitment, 0], 2);\n    assert_merkle_inclusion(\n        out_root,\n        out_subtree_root_path,\n        out_subtree_root_direction_selector,\n        new_subtree_root,\n        \"New commits not included in new root\",\n    );\n}\n\n// #[test]\n// fn test_allowed_transfer() {\n//     // generate amounts\n//     let in_commitment_value = 10;\n//     let out_receiver_commitment_value = 2;\n\n//     // account details\n//     let sender_private_key = 1;\n//     let sender_account = account(sender_private_key);\n\n//     // generate commitment\n//     let in_commitment_bliding = 2;\n//     let in_commitment = commitment(sender_account, in_commitment_value, in_commitment_bliding);\n\n//     // output commitment generation\n//     let receiver_account = account(100);\n//     let out_receiver_commitment_bliding = 3;\n//     let out_receiver_commitment =\n//         commitment(receiver_account, out_receiver_commitment_value, out_receiver_commitment_bliding);\n\n//     // old tree\n//     let old_first_level_l = hash([in_commitment, 1], 2);\n//     let old_first_level_r = hash([0, 0], 2);\n//     let in_commitment_root = hash([old_first_level_l, old_first_level_r], 2);\n\n//     // new tree\n//     let new_first_level_l = hash([in_commitment, 1], 2);\n//     let new_first_level_r = hash([out_receiver_commitment, 0], 2);\n//     let out_root = hash([new_first_level_l, new_first_level_r], 2);\n\n\n//     main(\n//         receiver_account,\n//         in_commitment_root,\n//         out_receiver_commitment_value,\n//         out_receiver_commitment_bliding,\n//         out_receiver_commitment,\n//         out_root,\n//         [new_first_level_l],\n//         [true],\n//     );\n// }\n\n// #[test(should_fail)]\n// fn test_unlinked_root() {\n//     // generate amounts\n//     let in_commitment_value = 10;\n//     let out_receiver_commitment_value = 2;\n//     let out_sender_commitment_value = 8000; // Notice here\n\n//     // account details\n//     let sender_private_key = 1;\n//     let sender_account = account(sender_private_key);\n\n//     // generate commitment\n//     let in_commitment_bliding = 2;\n//     let in_commitment = commitment(sender_account, in_commitment_value, in_commitment_bliding);\n\n//     // output commitment generation\n//     let receiver_account = account(100);\n//     let out_sender_commitment_bliding = 3;\n//     let out_receiver_commitment_bliding = 3;\n//     let out_receiver_commitment =\n//         commitment(receiver_account, out_receiver_commitment_value, out_receiver_commitment_bliding);\n//     let out_sender_commitment = commitment(sender_account, out_sender_commitment_value, out_sender_commitment_bliding);\n\n//     // old tree\n//     let old_first_level_l = hash([in_commitment, 1], 2);\n//     let old_first_level_r = hash([0, 0], 2);\n//     let in_commitment_root = hash([old_first_level_l, old_first_level_r], 2);\n\n//     // new tree\n//     let new_first_level_l = hash([100000, 1], 2); // <-------------------------------------------- Removed in commitment\n//     let new_first_level_r = hash([out_sender_commitment, out_receiver_commitment], 2);\n//     let out_root = hash([new_first_level_l, new_first_level_r], 2);\n\n//     main(\n//         receiver_account,\n//         in_commitment_root,\n//         out_receiver_commitment_value,\n//         out_receiver_commitment_bliding,\n//         out_receiver_commitment,\n//         out_root,\n//         [new_first_level_l],\n//         [true],\n//     );\n// }\n\n// #[test(should_fail)]\n// fn test_missing_new_commits() {\n//     // generate amounts\n//     let in_commitment_value = 10;\n//     let out_receiver_commitment_value = 2;\n\n//     // account details\n//     let sender_private_key = 1;\n//     let sender_account = account(sender_private_key);\n\n//     // generate commitment\n//     let in_commitment_bliding = 2;\n//     let in_commitment = commitment(sender_account, in_commitment_value, in_commitment_bliding);\n\n//     // output commitment generation\n//     let receiver_account = account(100);\n//     let out_receiver_commitment_bliding = 3;\n//     let out_receiver_commitment =\n//         commitment(receiver_account, out_receiver_commitment_value, out_receiver_commitment_bliding);\n\n//     // old tree\n//     let old_first_level_l = hash([in_commitment, 1], 2);\n//     let old_first_level_r = hash([0, 0], 2);\n//     let in_commitment_root = hash([old_first_level_l, old_first_level_r], 2);\n\n//     // new tree\n//     let new_first_level_l = hash([in_commitment, 1], 2);\n//     let new_first_level_r = hash([0, 0], 2); // <-------------------------------------------- Missing new commitments\n//     let out_root = hash([new_first_level_l, new_first_level_r], 2);\n\n//     main(\n//         receiver_account,\n//         in_commitment_root,\n//         out_receiver_commitment_value,\n//         out_receiver_commitment_bliding,\n//         out_receiver_commitment,\n//         out_root,\n//         [new_first_level_l],\n//         [true],\n//     );\n// }\n","path":"/Users/francoperez/repos/wakeup/starkware-private-erc20/packages/circuits/deposit/src/main.nr"},"64":{"source":"use std::hash::poseidon2::Poseidon2::hash;\n\n// account = hash(private_key) \npub fn account(private_key: Field) -> Field {\n    hash([private_key], 1)\n}\n\n// commitment = hash(owner, bliding, amount) // bliding = random number that makes commitment unique\npub fn commitment(owner: Field, value: Field, bliding: Field) -> Field {\n    hash([owner, value, bliding], 3)\n}\n\n// commitment_tracker = hash(commitment, bliding) // same bliding as for commitment\npub fn commitment_tracker(commitment: Field, bliding: Field) -> Field {\n    hash([commitment, bliding], 2)\n}\n\n// allowance_hash = hash(owner, spender, value)\npub fn allowance_hash(owner: Field, spender: Field, value: Field) -> Field {\n    hash([owner, spender, value], 3)\n}\n\n// allowance_relationship = hash(owner, spender)\npub fn allowance_relationship(owner: Field, spender: Field) -> Field {\n    hash([owner, spender], 2)\n}\n","path":"/Users/francoperez/repos/wakeup/starkware-private-erc20/packages/circuits/common/src/definitions.nr"},"65":{"source":"use std::hash::poseidon2::Poseidon2::hash;\n\npub fn assert_merkle_inclusion<let N: u32>(\n    root: Field,\n    path: [Field],\n    direction_selector: [bool],\n    leaf: Field,\n    failure_message: str<N>\n) {\n    assert(path.len() == direction_selector.len());\n    \n    let mut digest = leaf;\n    for i in 0..path.len() {\n        let (left, right) = if direction_selector[i] {\n            (path[i], digest)\n        } else {\n            (digest, path[i])\n        };\n\n        digest = hash([left, right], 2);\n    }\n\n    assert(digest == root, failure_message);\n}\n\npub fn find_leaf_index(direction_selector: [bool]) -> Field {\n    let mut index: u32 = 0;\n    let depth = direction_selector.len();\n\n    for i in 0..depth {\n        let pos = depth - 1 - i;\n        index = index * 2;\n        if direction_selector[pos] {\n            index = index + 1;\n        }\n    }\n    index as Field\n}\n\n// assert merkle inclusion tests\n\n#[test]\nfn should_be_included() {\n    let first_level_l = hash([hash([1], 1), hash([0], 1)], 2);\n    let first_level_r = hash([hash([0], 1), hash([0], 1)], 2);\n    let root = hash([first_level_l, first_level_r], 2);\n\n    let path: [Field; 2] = [ hash([0], 1), first_level_r ];\n    let direction_selector: [bool; 2] = [ false, false ];\n\n    assert_merkle_inclusion(root, path, direction_selector, hash([1], 1), \"Failed\");\n}\n\n\n#[test(should_fail_with=\"Failed\")]\nfn should_not_included() {\n    let first_level_l = hash([hash([1], 1), hash([0], 1)], 2);\n    let first_level_r = hash([hash([0], 1), hash([0], 1)], 2);\n    let root = hash([first_level_l, first_level_r], 2);\n\n    let path: [Field; 2] = [ hash([0], 1), first_level_r ];\n    let direction_selector: [bool; 2] = [ false, false ];\n\n    assert_merkle_inclusion(root, path, direction_selector, hash([100], 1), \"Failed\");\n}\n\n// generate index tests\n\n#[test]\nfn test_generate_index_case1() {\n    let directions: [bool; 2] = [true, false];\n    let index = find_leaf_index(directions);\n    assert(index == 1);\n}\n\n#[test]\nfn test_generate_index_case2() {\n    let directions: [bool; 2] = [false, true];\n    let index = find_leaf_index(directions);\n    assert(index == 2);\n}","path":"/Users/francoperez/repos/wakeup/starkware-private-erc20/packages/circuits/common/src/merkle_tree.nr"}},"names":["main"],"brillig_names":[]}
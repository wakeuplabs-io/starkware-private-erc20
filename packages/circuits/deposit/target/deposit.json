{"noir_version":"1.0.0-beta.1+03b58fa2dfcc8acc8cf5198b1b23b55676fbdb02","hash":8075886926033602939,"abi":{"parameters":[{"name":"receiver_account","type":{"kind":"field"},"visibility":"private"},{"name":"in_commitment_root","type":{"kind":"field"},"visibility":"public"},{"name":"in_public_amount","type":{"kind":"field"},"visibility":"public"},{"name":"out_receiver_commitment_bliding","type":{"kind":"field"},"visibility":"private"},{"name":"out_receiver_commitment","type":{"kind":"field"},"visibility":"public"},{"name":"out_root","type":{"kind":"field"},"visibility":"public"},{"name":"out_subtree_root_path","type":{"kind":"array","length":11,"type":{"kind":"field"}},"visibility":"private"},{"name":"out_subtree_root_direction_selector","type":{"kind":"array","length":11,"type":{"kind":"boolean"}},"visibility":"private"}],"return_type":null,"error_types":{"624257843267711912":{"error_kind":"string","string":"New commits not included in new root"},"11889370444656604730":{"error_kind":"string","string":"Invalid out receiver commitment"},"16860811455173349640":{"error_kind":"string","string":"Missing commitments from old tree in new tree"}}},"bytecode":"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","debug_symbols":"7ZzLaiJRFEX/pcYO7uPcl7/SNMEYEwTRoKahCfn31mDZVTua4LXOpNhD4z2bZOXg2qhV783T4vHt5WG5ft7smumv92a1mc/2y8368Oi9sf7zZ7vX2fr4cLefbffN1Ic4aRbrp2YqznxMmuflatFMXfyYfDnqkmvPuiQ/HLYp+9Nhm4374bA5J1uTwveHc0ins0XK+Wh0F456b05Hffz/K0T5+D1prBBHF0cgji6OeAlHJzy7bvhxIl2asM6U9nd33uBMrpgpt884UzFjK2ZcxYyvmJGKmVAxEytmKvbAVeyBq9gDX7EHvmIPfMUe+Io98BV74Cv2wFfsga/YA1+xB75iD+TKHog5z3ReZ08ztmLGVcz4ihmpmAkVM7FiJlXM5IqZcvtMqNiDULEH4fIeWMntjI/xB1lLu88+ddY5fMb7++NzWzF88Rgvd8eL2LZHScb4kTSv24Ck9t8ZjEUgkUD6QBKB9IFkAukDKaovsNGovsBGq/oCG51u/EjeVxlsGaMQSB8IDQ9AaHgAQsMDEBoegOgaPukaPlndeF3DJ68bT18CEPoSgNCXAIS+BCD0JQApBNIDko1qgci6hs9ON17X8Fl04+lLAEJfAhD6EoDQlwCEvuwDKYZA+kCsaoEouoYvup8RF1E1fAm68fQlAKEvAQh9CUDoyz4QayhMJGJJBIjofhHMGl3LWyPK+bqetyYq59ObSITiRCI0JxCxNCcSoTmRiCMRIOJ1u4RVdr0NyvnKrr9ywdtw+TQnEqE5gYijOZEIzYlEaE4kwm+sIxHR7RJO2fUuKucru/7KBdDD5dOcQMTTnEiE5kQiNCcSoTmRiJAIEAm6XcIru94n5Xxl1/uimy80JxKhOZEIzYlEaE4kQnMiEX6PHYlE3S4hyq6XrJyv7PpglPNpTiRCcyIRmhOJ0JxIhOZEIvxKOxJJul0iKLt+iHtcfZcflV2vfJcrG2lOJEJzIhGaE4nQnEiE5kQi/FY7Ernf9cG1Lgs+fMkfy+f1EkJ7WIrrEjn+mWksHyVIOf/jY7lnsdJY3hAZjshYat1wRMZS64YjIiQCRMZS64YjMpZaNxyRsdS64YiM5ZKL4YiMpogORSSzsyIRdlYkws6KRNhZkYiQCBBhZ0Ui7KxIhJ0VibCzIhF2ViAymns5DkeEnRWJsLMiEXZWJCIkAkTYWZEIOysSYWdFIuysSISdtU/EjeZ2qsMRYWdFIuysSISdFYkIiQARdlYkws6KRNhZkQg7KxJhZwUio7mR8XBE2FmRCDsrEmFnRSJy8fKCW/KvX15wePC4Xa5Wy5eH1WY+2y83691h8PDjP7Ptcva4WpwePr+t551n939f22fa+dftZr54etsujkmfzx3i/wE=","file_map":{"26":{"source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"62":{"source":"use common::definitions::{commitment};\nuse common::merkle_tree::{assert_merkle_inclusion};\nuse std::hash::poseidon2::Poseidon2::hash;\n\n// TODO: update before deploying. So far haven't found way to override for testing\nglobal DEPTH: u32 = 12;\n\nglobal ETH_ENG_RATIO: Field = 1_000_000; \n\npub fn main(\n    // accounts details\n    receiver_account: Field,\n    // utxo inputs\n    in_commitment_root: pub Field,\n    in_public_amount: pub Field,\n    // utxo outputs\n    out_receiver_commitment_bliding: Field,\n    out_receiver_commitment: pub Field,\n    // updated root\n    out_root: pub Field,\n    out_subtree_root_path: [Field; DEPTH - 1],\n    out_subtree_root_direction_selector: [bool; DEPTH - 1],\n) {\n    // validate commitment amounts and receivers are correct\n    let out_receiver_commitment_value = in_public_amount * ETH_ENG_RATIO;\n    assert_eq(\n        commitment(receiver_account, out_receiver_commitment_value, out_receiver_commitment_bliding),\n        out_receiver_commitment,\n            \"Invalid out receiver commitment\",\n    );\n\n\n    // check we're inserting in a previously empty subtree\n    let zero_subtree_root = hash([0, 0], 2);\n    assert_merkle_inclusion(\n        in_commitment_root,\n        out_subtree_root_path,\n        out_subtree_root_direction_selector,\n        zero_subtree_root,\n        \"Missing commitments from old tree in new tree\",\n    );\n\n    // check newly inserted commitments belong to out_root\n    let new_subtree_root = hash([out_receiver_commitment, 0], 2);\n    assert_merkle_inclusion(\n        out_root,\n        out_subtree_root_path,\n        out_subtree_root_direction_selector,\n        new_subtree_root,\n        \"New commits not included in new root\",\n    );\n}\n\n// #[test]\n// fn test_allowed_transfer() {\n//     // generate amounts\n//     let in_public_amount = 2;\n//     let out_receiver_commitment_value = in_public_amount * ETH_ENG_RATIO;\n//     // account details\n\n//     // output commitment generation\n//     let receiver_account = account(100);\n//     let out_receiver_commitment_bliding = 3;\n//     let out_receiver_commitment =\n//         commitment(receiver_account, out_receiver_commitment_value, out_receiver_commitment_bliding);\n\n//     // old tree\n//     let old_first_level_l = hash([0, 0], 2);\n//     let old_first_level_r = hash([0, 0], 2);\n//     let in_commitment_root = hash([old_first_level_l, old_first_level_r], 2);\n\n//     // new tree\n//     let new_first_level_l = hash([out_receiver_commitment, 0], 2);\n//     let new_first_level_r = hash([0, 0], 2);\n//     let out_root = hash([new_first_level_l, new_first_level_r], 2);\n\n\n//     main(\n//         receiver_account,\n//         in_commitment_root,\n//         in_public_amount,\n//         out_receiver_commitment_bliding,\n//         out_receiver_commitment,\n//         out_root,\n//         [new_first_level_r],\n//         [false],\n//     );\n// }\n\n// #[test(should_fail)]\n// fn test_unlinked_root() {\n//     // generate amounts\n//     let in_commitment_value = 10;\n//     let out_receiver_commitment_value = 2;\n//     let in_public_amount = 2000;\n//     let out_receiver_commitment_value = in_public_amount * ETH_ENG_RATIO;\n\n//     // account details\n//     let sender_private_key = 1;\n//     let sender_account = account(sender_private_key);\n\n//     // generate commitment\n//     let in_commitment_bliding = 2;\n//     let in_commitment = commitment(sender_account, in_commitment_value, in_commitment_bliding);\n\n//     // output commitment generation\n//     let receiver_account = account(100);\n//     let out_sender_commitment_bliding = 3;\n//     let out_receiver_commitment_bliding = 3;\n//     let out_receiver_commitment =\n//         commitment(receiver_account, out_receiver_commitment_value, out_receiver_commitment_bliding);\n//     let out_sender_commitment = commitment(sender_account, out_receiver_commitment_value, out_sender_commitment_bliding);\n\n//     // old tree\n//     let old_first_level_l = hash([in_commitment, 1], 2);\n//     let old_first_level_r = hash([0, 0], 2);\n//     let in_commitment_root = hash([old_first_level_l, old_first_level_r], 2);\n\n//     // new tree\n//     let new_first_level_l = hash([100000, 1], 2); // <-------------------------------------------- Removed in commitment\n//     let new_first_level_r = hash([out_sender_commitment, out_receiver_commitment], 2);\n//     let out_root = hash([new_first_level_l, new_first_level_r], 2);\n\n//     main(\n//         receiver_account,\n//         in_commitment_root,\n//         in_public_amount,\n//         out_receiver_commitment_bliding,\n//         out_receiver_commitment,\n//         out_root,\n//         [new_first_level_l],\n//         [true],\n//     );\n// }\n\n// #[test(should_fail)]\n// fn test_missing_new_commits() {\n//     // generate amounts\n//     let in_commitment_value = 10;\n//     let in_public_amount = 2;\n//     let out_receiver_commitment_value = in_public_amount * ETH_ENG_RATIO;\n\n//     // account details\n//     let sender_private_key = 1;\n//     let sender_account = account(sender_private_key);\n\n//     // generate commitment\n//     let in_commitment_bliding = 2;\n//     let in_commitment = commitment(sender_account, in_commitment_value, in_commitment_bliding);\n\n//     // output commitment generation\n//     let receiver_account = account(100);\n//     let out_receiver_commitment_bliding = 3;\n//     let out_receiver_commitment =\n//         commitment(receiver_account, out_receiver_commitment_value, out_receiver_commitment_bliding);\n\n//     // old tree\n//     let old_first_level_l = hash([in_commitment, 1], 2);\n//     let old_first_level_r = hash([0, 0], 2);\n//     let in_commitment_root = hash([old_first_level_l, old_first_level_r], 2);\n\n//     // new tree\n//     let new_first_level_l = hash([in_commitment, 1], 2);\n//     let new_first_level_r = hash([0, 0], 2); // <-------------------------------------------- Missing new commitments\n//     let out_root = hash([new_first_level_l, new_first_level_r], 2);\n\n//     main(\n//         receiver_account,\n//         in_commitment_root,\n//         in_public_amount,\n//         out_receiver_commitment_bliding,\n//         out_receiver_commitment,\n//         out_root,\n//         [new_first_level_l],\n//         [true],\n//     );\n// }\n","path":"/Users/matzapata/git-work/starkware/starkware-private-erc20/packages/circuits/deposit/src/main.nr"},"64":{"source":"use std::hash::poseidon2::Poseidon2::hash;\n\n// account = hash(private_key) \npub fn account(private_key: Field) -> Field {\n    hash([private_key], 1)\n}\n\n// commitment = hash(owner, bliding, amount) // bliding = random number that makes commitment unique\npub fn commitment(owner: Field, value: Field, bliding: Field) -> Field {\n    hash([owner, value, bliding], 3)\n}\n\n// commitment_tracker = hash(commitment, bliding) // same bliding as for commitment\npub fn commitment_tracker(commitment: Field, bliding: Field) -> Field {\n    hash([commitment, bliding], 2)\n}\n\n// allowance_hash = hash(owner, spender, value)\npub fn allowance_hash(owner: Field, spender: Field, value: Field) -> Field {\n    hash([owner, spender, value], 3)\n}\n\n// allowance_relationship = hash(owner, spender)\npub fn allowance_relationship(owner: Field, spender: Field) -> Field {\n    hash([owner, spender], 2)\n}\n","path":"/Users/matzapata/git-work/starkware/starkware-private-erc20/packages/circuits/common/src/definitions.nr"},"65":{"source":"use std::hash::poseidon2::Poseidon2::hash;\n\npub fn assert_merkle_inclusion<let N: u32>(\n    root: Field,\n    path: [Field],\n    direction_selector: [bool],\n    leaf: Field,\n    failure_message: str<N>\n) {\n    assert(path.len() == direction_selector.len());\n    \n    let mut digest = leaf;\n    for i in 0..path.len() {\n        let (left, right) = if direction_selector[i] {\n            (path[i], digest)\n        } else {\n            (digest, path[i])\n        };\n\n        digest = hash([left, right], 2);\n    }\n\n    assert(digest == root, failure_message);\n}\n\npub fn find_leaf_index(direction_selector: [bool]) -> Field {\n    let mut index: u32 = 0;\n    let depth = direction_selector.len();\n\n    for i in 0..depth {\n        let pos = depth - 1 - i;\n        index = index * 2;\n        if direction_selector[pos] {\n            index = index + 1;\n        }\n    }\n    index as Field\n}\n\n// assert merkle inclusion tests\n\n#[test]\nfn should_be_included() {\n    let first_level_l = hash([hash([1], 1), hash([0], 1)], 2);\n    let first_level_r = hash([hash([0], 1), hash([0], 1)], 2);\n    let root = hash([first_level_l, first_level_r], 2);\n\n    let path: [Field; 2] = [ hash([0], 1), first_level_r ];\n    let direction_selector: [bool; 2] = [ false, false ];\n\n    assert_merkle_inclusion(root, path, direction_selector, hash([1], 1), \"Failed\");\n}\n\n\n#[test(should_fail_with=\"Failed\")]\nfn should_not_included() {\n    let first_level_l = hash([hash([1], 1), hash([0], 1)], 2);\n    let first_level_r = hash([hash([0], 1), hash([0], 1)], 2);\n    let root = hash([first_level_l, first_level_r], 2);\n\n    let path: [Field; 2] = [ hash([0], 1), first_level_r ];\n    let direction_selector: [bool; 2] = [ false, false ];\n\n    assert_merkle_inclusion(root, path, direction_selector, hash([100], 1), \"Failed\");\n}\n\n// generate index tests\n\n#[test]\nfn test_generate_index_case1() {\n    let directions: [bool; 2] = [true, false];\n    let index = find_leaf_index(directions);\n    assert(index == 1);\n}\n\n#[test]\nfn test_generate_index_case2() {\n    let directions: [bool; 2] = [false, true];\n    let index = find_leaf_index(directions);\n    assert(index == 2);\n}","path":"/Users/matzapata/git-work/starkware/starkware-private-erc20/packages/circuits/common/src/merkle_tree.nr"}},"names":["main"],"brillig_names":[]}
{"noir_version":"1.0.0-beta.1+03b58fa2dfcc8acc8cf5198b1b23b55676fbdb02","hash":17519761631140041315,"abi":{"parameters":[{"name":"in_private_key","type":{"kind":"field"},"visibility":"private"},{"name":"in_amount","type":{"kind":"field"},"visibility":"private"},{"name":"in_spender","type":{"kind":"field"},"visibility":"private"},{"name":"out_allowance_hash","type":{"kind":"field"},"visibility":"public"},{"name":"out_relationship_id","type":{"kind":"field"},"visibility":"public"}],"return_type":null,"error_types":{}},"bytecode":"H4sIAAAAAAAA/9WUWw6CMBBFCwiooIK6kE4f0P65FYll/yswVinJpGKiPD68yU0nk9DcnpkQkE5n6w15V+DOizs5rYQwNTPA4UqZbpSkQjaVAgVSyRtTnBslVK0bXVMNghtopeYt7RSju+hELZkzGZ8T/MYz29F65WW9uzr+UCeu7r9LrdduTlvUX4pBNp4B/4ZBit4aojpAdeYxyK131nvrwwCD0GNApwmiGXnm5D92vxifk/mNX+aOd7/w5l66e06k+1ctPffVjDzL+XK9ePZvj7wdCBGHaIAR1gM6ICoP+AUAAA==","debug_symbols":"7ZXNqsMgEIXfxXUWOhq1eZVLKfkxRRATTHKhhLx7bYmptJLuS5Zn5puDfBtn1Khqul60bbsBFX8zMl1djrqzPs0IP0dDX9pHGsbSjaigOc+Qsg0qGOAlQ602ChXAl+wDBQGBBcG+wERIusJEYvgC462ZYJHvwxTjlaVAN5RDqvdVy+QLZcs5Q+SwEdmAw0Zkg/6IjVyGFxO8b4PL04oKIG822GEjspEnbVCe7vYH/Df0MbbpO4l9fZIFfVKwN33isBHZkCkbDPJ099mHymlj9PUS/+x+/F86XVZGrbGdbB1tx1sfNuG+d12tmsmpR9Nz5+vv","file_map":{"26":{"source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"62":{"source":"use std::hash::poseidon2::Poseidon2::hash;\nuse common::definitions::{allowance_relationship, allowance_hash, account};\n\nfn main(\n    in_private_key: Field,\n    in_amount: Field,\n    in_spender: Field,\n    out_allowance_hash: pub Field,\n    out_relationship_id: pub Field,\n) {\n    let owner_address = account(in_private_key);\n    assert(out_allowance_hash == allowance_hash(owner_address, in_spender, in_amount));\n\n    assert(out_relationship_id == allowance_relationship(owner_address, in_spender));\n}\n\n#[test]\nfn test_correct_allowance() {\n    let owner_private_key = 1;\n    let owner_address = account(owner_private_key);\n    let in_amount = 10;\n    let in_spender = 20;\n    let out_allowance_hash = hash([owner_address, in_spender, in_amount], 3);\n    let out_relationship_id = hash([owner_address, in_spender], 2);\n\n    main(owner_private_key, in_amount, in_spender, out_allowance_hash, out_relationship_id);\n}\n\n#[test(should_fail)]\nfn test_incorrect_amount() {\n    let owner_private_key = 1;\n    let owner_address = account(owner_private_key);\n    let in_amount = 10;\n    let in_spender = 20;\n    let out_allowance_hash = hash(\n        [owner_address, in_spender, in_amount + 100], // <--- Notice incorrect amount\n        3,\n    );\n    let out_relationship_id = hash([owner_address, in_spender], 2);\n\n    main(owner_private_key, in_amount, in_spender, out_allowance_hash, out_relationship_id);\n}\n\n#[test(should_fail)]\nfn test_incorrect_owner() {\n    let owner_private_key = 1;\n    let owner_address = account(owner_private_key);\n    let in_amount = 10;\n    let in_spender = 20;\n    let out_allowance_hash = hash(\n        [account(owner_private_key + 1), in_spender, in_amount], // <--- Notice incorrect private key\n        3,\n    );\n    let out_relationship_id = hash([owner_address, in_spender], 2);\n\n    main(owner_private_key, in_amount, in_spender, out_allowance_hash, out_relationship_id);\n}\n","path":"/Users/matzapata/git-work/starkware/starkware-private-erc20/packages/circuits/approve/src/main.nr"},"64":{"source":"use std::hash::poseidon2::Poseidon2::hash;\n\n// account = hash(private_key) \npub fn account(private_key: Field) -> Field {\n    hash([private_key], 1)\n}\n\n// commitment = hash(owner, bliding, amount) // bliding = random number that makes commitment unique\npub fn commitment(owner: Field, value: Field, bliding: Field) -> Field {\n    hash([owner, value, bliding], 3)\n}\n\n// commitment_tracker = hash(commitment, bliding) // same bliding as for commitment\npub fn commitment_tracker(commitment: Field, bliding: Field) -> Field {\n    hash([commitment, bliding], 3)\n}\n\n// allowance_hash = hash(owner, spender, value)\npub fn allowance_hash(owner: Field, spender: Field, value: Field) -> Field {\n    hash([owner, spender, value], 3)\n}\n\n// allowance_relationship = hash(owner, spender)\npub fn allowance_relationship(owner: Field, spender: Field) -> Field {\n    hash([owner, spender], 2)\n}\n","path":"/Users/matzapata/git-work/starkware/starkware-private-erc20/packages/circuits/common/src/definitions.nr"}},"names":["main"],"brillig_names":[]}
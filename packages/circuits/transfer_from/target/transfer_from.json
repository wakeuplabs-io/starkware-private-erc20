{"noir_version":"1.0.0-beta.1+03b58fa2dfcc8acc8cf5198b1b23b55676fbdb02","hash":15153333790211483953,"abi":{"parameters":[{"name":"owner_account","type":{"kind":"field"},"visibility":"private"},{"name":"receiver_account","type":{"kind":"field"},"visibility":"private"},{"name":"spender_private_key","type":{"kind":"field"},"visibility":"private"},{"name":"in_commitment_root","type":{"kind":"field"},"visibility":"public"},{"name":"in_commitment_path","type":{"kind":"array","length":12,"type":{"kind":"field"}},"visibility":"private"},{"name":"in_commitment_direction_selector","type":{"kind":"array","length":12,"type":{"kind":"boolean"}},"visibility":"private"},{"name":"in_commitment_bliding","type":{"kind":"field"},"visibility":"private"},{"name":"in_commitment_value","type":{"kind":"field"},"visibility":"private"},{"name":"in_commitment_spending_tracker","type":{"kind":"field"},"visibility":"public"},{"name":"in_allowance_value","type":{"kind":"field"},"visibility":"private"},{"name":"in_allowance_hash","type":{"kind":"field"},"visibility":"public"},{"name":"in_allowance_relationship","type":{"kind":"field"},"visibility":"public"},{"name":"out_allowance_hash","type":{"kind":"field"},"visibility":"public"},{"name":"out_receiver_value","type":{"kind":"field"},"visibility":"private"},{"name":"out_receiver_bliding","type":{"kind":"field"},"visibility":"private"},{"name":"out_receiver_commitment","type":{"kind":"field"},"visibility":"public"},{"name":"out_owner_value","type":{"kind":"field"},"visibility":"private"},{"name":"out_owner_bliding","type":{"kind":"field"},"visibility":"private"},{"name":"out_owner_commitment","type":{"kind":"field"},"visibility":"public"},{"name":"out_root","type":{"kind":"field"},"visibility":"public"},{"name":"out_subtree_root_path","type":{"kind":"array","length":11,"type":{"kind":"field"}},"visibility":"private"},{"name":"out_subtree_direction_selector","type":{"kind":"array","length":11,"type":{"kind":"boolean"}},"visibility":"private"}],"return_type":null,"error_types":{"1766617166191739668":{"error_kind":"string","string":"Invalid UTXO amounts"},"2262927323010417218":{"error_kind":"string","string":"New commits don't belong to new root"},"3532385316123601723":{"error_kind":"string","string":"Invalid output allowance hash"},"3765925724515705448":{"error_kind":"string","string":"Invalid allowance relationship"},"6723502231603746505":{"error_kind":"string","string":"Invalid spending tracker"},"8530396002973566632":{"error_kind":"string","string":"Cannot find input commitment"},"9048419499859208626":{"error_kind":"string","string":"Invalid receiver output commitment"},"10825905883719149556":{"error_kind":"string","string":"Invalid input allowance hash"},"13370804117992790937":{"error_kind":"string","string":"Invalid owner output commitment"},"16860811455173349640":{"error_kind":"string","string":"Missing commitments from old tree in new tree"}}},"bytecode":"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","debug_symbols":"7Z3dThtJEIXfxddcTFdX//Eqq1VECIksIYiArLSK8u5rWMbGx2NbLrpuWufSMFWyv1TqK890N79X3+6+/vrxZf3w/fF5df3X79X94+3Ny/rxYfPq90rK28+ef948vL58frl5elldx5SvVncP31bXKtOfq9X39f3d6lryn6uDS6XIfK0UPXNxKDW+XxzqJGcunraZw1TSmYtTKvPF+fWK94uzLFwc4/R+bcy7N5H1z99XK6kEsg+kLQEJuW3feAnhY/pNTJwMMcEQI4aYaIhRQ0wyxGRDTDHEVEOMoQ7UUAdqqAM11IEa6kANdaCGOlBDHaihDtRQB2qog2Sog2Sog2Sog2Sog7RcB0XCNiZFjEmGmGyIKYaYaohpl8fkyRATDDFiiImGGEMdZEMdZEMd5CP9IMp24JB4ZizQNo8FZTfI5PSWvn4+fZ3Hmdgipm+fTq8601GtkL5Mg0x5FwEp8z9nmgICCQSyD0QIZB9IJJB9IEog+0CSq3FKdjVOKb7Gqb7pG4txD0il4QEIDQ9AaHgAEl37d1XX/l2Tb/rs2r+rr33qKHe1u9U6fbkPpNGXAIS+BCDiqocWXft387VPS679u/nap43yFLhbrdOXAIS+3AcSJgoTiQRXQWw+lWsLD1N0zq+uTTxMyTl/ZsUDEXoTiVCcSITmBCJh8vVECL59PDh7KETfPh6cPRQSKx6I0JxIhOZEIjQnEmm+npDJt4+Ls4dEfPu4OHtIlBUPRGhOJEJzIhGaE4lUZ0803z4enT0Ug28fj84eilx5iERoTiRCcyIRmhOJ+O6ICLE693FnD+nk28fV2UPKBX1IhOZEIjQnEqE5kUj29YQW5z7u7CH13ZsXkrOHElf2IRGaE4nQnEiE5kQivvvdQvLd8BaSs4dSde7jzh7KXOGHRGhOJEJzIhGaE4moryey7863kJ09lItzH3f2UOYKPyDC41UOiNCcSITmRCKfX2+TtidCpZgO8usgxFueP6VMoZwjMidOKe8u1f+JLJuzybH8b0GDPFgTCXV+G6L5NMawS/xRgO8YB1mS0pHIIIs5RdqWSNx8tpNEcp2bW5FwQGRxSBIp4Uj+16BRDnER3X3MJOk0xrqd9WtRxLh8iotozEfyvwUtqlbyrs3lUg+CBvkeJ3X7lqWd8+fJEq6D+LMjkUV/SpV6JP9b0CD+jFOaP2YMoZ35AnzihO2wfPjLXn5tBxgHUUzcqHb+mNL0MxiXv4d/yB/lYJo7du5JmofumMpBCR87G+R0kFiCoiVILUHJEpQtQcUSVC1B7fIgmSZLULAEHamI7X+1mMNhULQEqSUoWYKyJahYgqolqBmCwmQJCpYgS0UES0UsbwLd3GcOuxvN55rxiZvScmQT6EX5T9w0liNbKi/Jf+qmroyyQfEyIiduT8koGxQ7Ehnkxn8/IstbKvt1leUtlf26yvKWyn5dZXlLZcf8yooEIoMsb+1IZJTv3/2I0PVIhK5HInQ9EInOro/Oro/inN/Z9VGd89OcSITmRCI0JxKhOZEIzQlEdJDH2h2JBN9ZQp1dr9E5v/q6XpNzfpoTidCcSITmRCI0JxBJNCcSGWRheUci4jtLJGfXJ3XO7+z65PxkNtGcSITmRCI0JxAZZTNzRyI0JxIZZEtWRyLRd5bIzq7PzquwsrPrl7cGd8xPcyIRmhOIjLKZuSMRmhOJ0JxIZJDtYx2JqO8sUZxdX7JzfmfXH9mT2y8/zQlERtm+25EIzYlEaE4kQnMiESURIJJ8Z4nq7PpanPM7u/7IVuNu+RvNiURoTiRCcyIRmhOJ0JxIhKvakUj2nSWas+tbdc7v6/o4Tc75aU4kQnMiEZoTidCcSITmRCJc1Y5EiussESdf18ep+eYPzq4PwTk/zYlEaE4kQnMiEZoTidCcSISr2pFI9Z0lgrPre5yFdTK/s+udz8KKQnMiEZoTidCcSITmRCI0JxLhqnYk8nnXn/rTOjGO8ry+tO2hwfXgzPkYR3mUUFOa3/Kk9ROFFUe5IdKPyChjXT8iSiJAZJSxrh+RUca6fkRGGev6ERllrOtHZJQtF92IDHO0XD8inFmRCGdWJMKZFYkoiQARzqxIhDMrEuHMikQ4syIRzqxAZJhDHfsR4cyKRDizIhHOrEhESQSIcGZFIpxZkQhnViTCmRWJcGYFIsMcp9qPCGdWJMKZFYlwZkUiSiJAhDMrEuHMikQ4syIRzqxIhDMrEBnmION+RDizIhHOrEiEMysSURIBIssz6yX5j28v2Lz4+rS+v1//+HL/eHvzsn58eN4Ebn78z83T+ubr/d37y++/Hm4//Pbl35/zb+b4n0+Pt3fffj3dvWZ6+90m/X8=","file_map":{"26":{"source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"62":{"source":"use common::definitions::{\n    account, allowance_hash, allowance_relationship, commitment, commitment_tracker,\n};\nuse common::merkle_tree::assert_merkle_inclusion;\nuse std::hash::poseidon2::Poseidon2::hash;\n\n// TODO: update before deploying. So far haven't found way to override for testing\nglobal DEPTH: u32 = 12;\n\npub fn main(\n    // account details\n    owner_account: Field,\n    receiver_account: Field,\n    spender_private_key: Field,\n    // input commitment details\n    in_commitment_root: pub Field,\n    in_commitment_path: [Field; DEPTH],\n    in_commitment_direction_selector: [bool; DEPTH],\n    in_commitment_bliding: Field,\n    in_commitment_value: Field,\n    in_commitment_spending_tracker: pub Field,\n    // allowance utxo details\n    in_allowance_value: Field,\n    in_allowance_hash: pub Field,\n    in_allowance_relationship: pub Field,\n    out_allowance_hash: pub Field,\n    // out receiver commitment detailsa\n    out_receiver_value: Field,\n    out_receiver_bliding: Field,\n    out_receiver_commitment: pub Field,\n    // out owner commitment details\n    out_owner_value: Field,\n    out_owner_bliding: Field,\n    out_owner_commitment: pub Field,\n    // output commitment details\n    out_root: pub Field,\n    out_subtree_root_path: [Field; DEPTH - 1], // path of hash(out_owner_commitment, out_receiver_commitment)\n    out_subtree_direction_selector: [bool; DEPTH - 1], // path direction of hash(out_owner_commitment, out_receiver_commitment)\n) {\n    // check in_commitment is included in the root and belongs to sender\n    let in_commitment = commitment(owner_account, in_commitment_value, in_commitment_bliding);\n    assert_merkle_inclusion(\n        in_commitment_root,\n        in_commitment_path,\n        in_commitment_direction_selector,\n        in_commitment,\n        \"Cannot find input commitment\",\n    );\n\n    // check spending tracker to properly nullify commitment is correct\n    assert_eq(\n        in_commitment_spending_tracker,\n        commitment_tracker(in_commitment, in_commitment_bliding),\n        \"Invalid spending tracker\",\n    );\n\n    // check input allowance hash is correct and so we can trust allowance amount. And relationship so we can trust update after\n    let spender_account = account(spender_private_key);\n    assert_eq(\n        in_allowance_hash,\n        allowance_hash(owner_account, spender_account, in_allowance_value),\n        \"Invalid input allowance hash\",\n    );\n    assert_eq(\n        in_allowance_relationship,\n        allowance_relationship(owner_account, spender_account),\n        \"Invalid allowance relationship\",\n    );\n\n    // check commitments utxo\n    assert_eq(in_commitment_value, out_receiver_value + out_owner_value, \"Invalid UTXO amounts\");\n\n    // check allowance utxo\n    let out_allowance_value = in_allowance_value - out_receiver_value;\n    assert_eq(\n        out_allowance_hash,\n        allowance_hash(owner_account, spender_account, out_allowance_value),\n        \"Invalid output allowance hash\",\n    );\n\n    // validate commitment amounts and receivers are correct\n    assert_eq(\n        commitment(owner_account, out_owner_value, out_owner_bliding),\n        out_owner_commitment,\n        \"Invalid owner output commitment\",\n    );\n    assert_eq(\n        commitment(receiver_account, out_receiver_value, out_receiver_bliding),\n        out_receiver_commitment,\n        \"Invalid receiver output commitment\",\n    );\n\n    // check we're inserting in a previously empty subtree\n    let zero_subtree_root = hash([0, 0], 2);\n    assert_merkle_inclusion(\n        in_commitment_root,\n        out_subtree_root_path,\n        out_subtree_direction_selector,\n        zero_subtree_root,\n        \"Missing commitments from old tree in new tree\",\n    );\n\n    // check newly inserted commitments belong to out_root\n    let new_subtree_root = hash([out_owner_commitment, out_receiver_commitment], 2);\n    assert_merkle_inclusion(\n        out_root,\n        out_subtree_root_path,\n        out_subtree_direction_selector,\n        new_subtree_root,\n        \"New commits don't belong to new root\",\n    );\n}\n\n// #[test]\n// fn test_allowed_transfer() {\n//     // generate input amounts\n//     let in_commitment_value = 10;\n//     let in_allowance_value = 10;\n\n//     // output amounts\n//     let out_receiver_value = 2;\n//     let out_owner_value = in_commitment_value - out_receiver_value;\n//     let out_allowance_value = in_allowance_value - out_receiver_value;\n\n//     // accounts details\n//     let spender_private_key = 0;\n//     let spender_account = account(spender_private_key);\n//     let owner_account = account(1);\n\n//     // generate commitment\n//     let in_commitment_bliding = 2;\n//     let in_commitment = commitment(owner_account, in_commitment_value, in_commitment_bliding);\n//     let in_commitment_spending_tracker = commitment_tracker(in_commitment, in_commitment_bliding);\n\n//     // output commitment generation\n//     let receiver_account = account(100);\n//     let out_owner_bliding = 3;\n//     let out_receiver_bliding = 3;\n//     let out_receiver_commitment =\n//         commitment(receiver_account, out_receiver_value, out_receiver_bliding);\n//     let out_owner_commitment = commitment(owner_account, out_owner_value, out_owner_bliding);\n\n//     // old tree\n//     let old_first_level_l = hash([in_commitment, 1], 2);\n//     let old_first_level_r = hash([0, 0], 2);\n//     let in_commitment_root = hash([old_first_level_l, old_first_level_r], 2);\n//     let in_commitment_path = [1, old_first_level_r];\n//     let in_commitment_direction_selector = [false, false];\n\n//     // new tree\n//     let new_first_level_l = hash([in_commitment, 1], 2);\n//     let new_first_level_r = hash([out_owner_commitment, out_receiver_commitment], 2);\n//     let out_root = hash([new_first_level_l, new_first_level_r], 2);\n//     let out_subtree_root_path = [new_first_level_l];\n//     let out_subtree_direction_selector = [true];\n\n//     // in_allowance_hash\n//     let in_allowance_hash = allowance_hash(owner_account, spender_account, in_allowance_value);\n//     let out_allowance_hash = allowance_hash(owner_account, spender_account, out_allowance_value);\n//     let in_allowance_relationship = allowance_relationship(owner_account, spender_account);\n\n//     main(\n//         // input commitment details\n//         owner_account,\n//         receiver_account,\n//         spender_private_key,\n//         in_commitment_root,\n//         in_commitment_path,\n//         in_commitment_direction_selector,\n//         in_commitment_bliding,\n//         in_commitment_value,\n//         in_commitment_spending_tracker,\n//         // allowance utxo details\n//         in_allowance_value,\n//         in_allowance_hash,\n//         in_allowance_relationship,\n//         out_allowance_hash,\n//         // out receiver commitment details\n//         out_receiver_value,\n//         out_receiver_bliding,\n//         out_receiver_commitment,\n//         // out owner commitment details\n//         out_owner_value,\n//         out_owner_bliding,\n//         out_owner_commitment,\n//         // output commitment details\n//         out_root,\n//         out_subtree_root_path,\n//         out_subtree_direction_selector,\n//     );\n// }\n\n// #[test(should_fail_with = \"Invalid UTXO amounts\")]\n// fn test_invalid_utxo_amounts() {\n//     // generate input amounts\n//     let in_commitment_value = 10;\n//     let in_allowance_value = 10;\n\n//     // output amounts\n//     let out_receiver_value = 2;\n//     let out_owner_value = 100; // <------------ Should be: in_commitment_value - out_receiver_value;\n//     let out_allowance_value = in_allowance_value - out_receiver_value;\n\n//     // accounts details\n//     let spender_private_key = 0;\n//     let spender_account = account(spender_private_key);\n//     let owner_account = account(1);\n\n//     // generate commitment\n//     let in_commitment_bliding = 2;\n//     let in_commitment = commitment(owner_account, in_commitment_value, in_commitment_bliding);\n//     let in_commitment_spending_tracker = commitment_tracker(in_commitment, in_commitment_bliding);\n\n//     // output commitment generation\n//     let receiver_account = account(100);\n//     let out_owner_bliding = 3;\n//     let out_receiver_bliding = 3;\n//     let out_receiver_commitment =\n//         commitment(receiver_account, out_receiver_value, out_receiver_bliding);\n//     let out_owner_commitment = commitment(owner_account, out_owner_value, out_owner_bliding);\n\n//     // old tree\n//     let old_first_level_l = hash([in_commitment, 1], 2);\n//     let old_first_level_r = hash([0, 0], 2);\n//     let in_commitment_root = hash([old_first_level_l, old_first_level_r], 2);\n//     let in_commitment_path = [1, old_first_level_r];\n//     let in_commitment_direction_selector = [false, false];\n\n//     // new tree\n//     let new_first_level_l = hash([in_commitment, 1], 2);\n//     let new_first_level_r = hash([out_owner_commitment, out_receiver_commitment], 2);\n//     let out_root = hash([new_first_level_l, new_first_level_r], 2);\n//     let out_subtree_root_path = [new_first_level_l];\n//     let out_subtree_direction_selector = [true];\n\n//     // in_allowance_hash\n//     let in_allowance_hash = allowance_hash(owner_account, spender_account, in_allowance_value);\n//     let out_allowance_hash = allowance_hash(owner_account, spender_account, out_allowance_value);\n//     let in_allowance_relationship = allowance_relationship(owner_account, spender_account);\n\n//     main(\n//         // input commitment details\n//         owner_account,\n//         receiver_account,\n//         spender_private_key,\n//         in_commitment_root,\n//         in_commitment_path,\n//         in_commitment_direction_selector,\n//         in_commitment_bliding,\n//         in_commitment_value,\n//         in_commitment_spending_tracker,\n//         // allowance utxo details\n//         in_allowance_value,\n//         in_allowance_hash,\n//         in_allowance_relationship,\n//         out_allowance_hash,\n//         // out receiver commitment details\n//         out_receiver_value,\n//         out_receiver_bliding,\n//         out_receiver_commitment,\n//         // out owner commitment details\n//         out_owner_value,\n//         out_owner_bliding,\n//         out_owner_commitment,\n//         // output commitment details\n//         out_root,\n//         out_subtree_root_path,\n//         out_subtree_direction_selector,\n//     );\n// }\n\n// #[test(should_fail_with = \"Missing commitments from old tree in new tree\")]\n// fn test_remove_existing_commitments() {\n//     // generate input amounts\n//     let in_commitment_value = 10;\n//     let in_allowance_value = 10;\n\n//     // output amounts\n//     let out_receiver_value = 2;\n//     let out_owner_value = in_commitment_value - out_receiver_value;\n//     let out_allowance_value = in_allowance_value - out_receiver_value;\n\n//     // accounts details\n//     let spender_private_key = 0;\n//     let spender_account = account(spender_private_key);\n//     let owner_account = account(1);\n\n//     // generate commitment\n//     let in_commitment_bliding = 2;\n//     let in_commitment = commitment(owner_account, in_commitment_value, in_commitment_bliding);\n//     let in_commitment_spending_tracker = commitment_tracker(in_commitment, in_commitment_bliding);\n\n//     // output commitment generation\n//     let receiver_account = account(100);\n//     let out_owner_bliding = 3;\n//     let out_receiver_bliding = 3;\n//     let out_receiver_commitment =\n//         commitment(receiver_account, out_receiver_value, out_receiver_bliding);\n//     let out_owner_commitment = commitment(owner_account, out_owner_value, out_owner_bliding);\n\n//     // old tree\n//     let old_first_level_l = hash([in_commitment, 1], 2);\n//     let old_first_level_r = hash([0, 0], 2);\n//     let in_commitment_root = hash([old_first_level_l, old_first_level_r], 2);\n//     let in_commitment_path = [1, old_first_level_r];\n//     let in_commitment_direction_selector = [false, false];\n\n//     // new tree\n//     let new_first_level_l = hash([0, 1], 2); // <------------------------ removed input_commitment\n//     let new_first_level_r = hash([out_owner_commitment, out_receiver_commitment], 2);\n//     let out_root = hash([new_first_level_l, new_first_level_r], 2);\n//     let out_subtree_root_path = [new_first_level_l];\n//     let out_subtree_direction_selector = [true];\n\n//     // in_allowance_hash\n//     let in_allowance_hash = allowance_hash(owner_account, spender_account, in_allowance_value);\n//     let out_allowance_hash = allowance_hash(owner_account, spender_account, out_allowance_value);\n//     let in_allowance_relationship = allowance_relationship(owner_account, spender_account);\n\n//     main(\n//         // input commitment details\n//         owner_account,\n//         receiver_account,\n//         spender_private_key,\n//         in_commitment_root,\n//         in_commitment_path,\n//         in_commitment_direction_selector,\n//         in_commitment_bliding,\n//         in_commitment_value,\n//         in_commitment_spending_tracker,\n//         // allowance utxo details\n//         in_allowance_value,\n//         in_allowance_hash,\n//         in_allowance_relationship,\n//         out_allowance_hash,\n//         // out receiver commitment details\n//         out_receiver_value,\n//         out_receiver_bliding,\n//         out_receiver_commitment,\n//         // out owner commitment details\n//         out_owner_value,\n//         out_owner_bliding,\n//         out_owner_commitment,\n//         // output commitment details\n//         out_root,\n//         out_subtree_root_path,\n//         out_subtree_direction_selector,\n//     );\n// }\n","path":"/Users/matzapata/git-work/starkware/starkware-private-erc20/packages/circuits/transfer_from/src/main.nr"},"64":{"source":"use std::hash::poseidon2::Poseidon2::hash;\n\n// account = hash(private_key) \npub fn account(private_key: Field) -> Field {\n    hash([private_key], 1)\n}\n\n// commitment = hash(owner, bliding, amount) // bliding = random number that makes commitment unique\npub fn commitment(owner: Field, value: Field, bliding: Field) -> Field {\n    hash([owner, value, bliding], 3)\n}\n\n// commitment_tracker = hash(commitment, bliding) // same bliding as for commitment\npub fn commitment_tracker(commitment: Field, bliding: Field) -> Field {\n    hash([commitment, bliding], 2)\n}\n\n// allowance_hash = hash(owner, spender, value)\npub fn allowance_hash(owner: Field, spender: Field, value: Field) -> Field {\n    hash([owner, spender, value], 3)\n}\n\n// allowance_relationship = hash(owner, spender)\npub fn allowance_relationship(owner: Field, spender: Field) -> Field {\n    hash([owner, spender], 2)\n}\n","path":"/Users/matzapata/git-work/starkware/starkware-private-erc20/packages/circuits/common/src/definitions.nr"},"65":{"source":"use std::hash::poseidon2::Poseidon2::hash;\n\npub fn assert_merkle_inclusion<let N: u32>(\n    root: Field,\n    path: [Field],\n    direction_selector: [bool],\n    leaf: Field,\n    failure_message: str<N>\n) {\n    assert(path.len() == direction_selector.len());\n    \n    let mut digest = leaf;\n    for i in 0..path.len() {\n        let (left, right) = if direction_selector[i] {\n            (path[i], digest)\n        } else {\n            (digest, path[i])\n        };\n\n        digest = hash([left, right], 2);\n    }\n\n    assert(digest == root, failure_message);\n}\n\npub fn find_leaf_index(direction_selector: [bool]) -> Field {\n    let mut index: u32 = 0;\n    let depth = direction_selector.len();\n\n    for i in 0..depth {\n        let pos = depth - 1 - i;\n        index = index * 2;\n        if direction_selector[pos] {\n            index = index + 1;\n        }\n    }\n    index as Field\n}\n\n// assert merkle inclusion tests\n\n#[test]\nfn should_be_included() {\n    let first_level_l = hash([hash([1], 1), hash([0], 1)], 2);\n    let first_level_r = hash([hash([0], 1), hash([0], 1)], 2);\n    let root = hash([first_level_l, first_level_r], 2);\n\n    let path: [Field; 2] = [ hash([0], 1), first_level_r ];\n    let direction_selector: [bool; 2] = [ false, false ];\n\n    assert_merkle_inclusion(root, path, direction_selector, hash([1], 1), \"Failed\");\n}\n\n\n#[test(should_fail_with=\"Failed\")]\nfn should_not_included() {\n    let first_level_l = hash([hash([1], 1), hash([0], 1)], 2);\n    let first_level_r = hash([hash([0], 1), hash([0], 1)], 2);\n    let root = hash([first_level_l, first_level_r], 2);\n\n    let path: [Field; 2] = [ hash([0], 1), first_level_r ];\n    let direction_selector: [bool; 2] = [ false, false ];\n\n    assert_merkle_inclusion(root, path, direction_selector, hash([100], 1), \"Failed\");\n}\n\n// generate index tests\n\n#[test]\nfn test_generate_index_case1() {\n    let directions: [bool; 2] = [true, false];\n    let index = find_leaf_index(directions);\n    assert(index == 1);\n}\n\n#[test]\nfn test_generate_index_case2() {\n    let directions: [bool; 2] = [false, true];\n    let index = find_leaf_index(directions);\n    assert(index == 2);\n}","path":"/Users/matzapata/git-work/starkware/starkware-private-erc20/packages/circuits/common/src/merkle_tree.nr"}},"names":["main"],"brillig_names":[]}
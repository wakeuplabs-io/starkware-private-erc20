{"noir_version":"1.0.0-beta.1+03b58fa2dfcc8acc8cf5198b1b23b55676fbdb02","hash":11143874961470917952,"abi":{"parameters":[{"name":"owner_account","type":{"kind":"field"},"visibility":"private"},{"name":"receiver_account","type":{"kind":"field"},"visibility":"private"},{"name":"spender_private_key","type":{"kind":"field"},"visibility":"private"},{"name":"in_commitment_root","type":{"kind":"field"},"visibility":"public"},{"name":"in_commitment_path","type":{"kind":"array","length":12,"type":{"kind":"field"}},"visibility":"private"},{"name":"in_commitment_direction_selector","type":{"kind":"array","length":12,"type":{"kind":"boolean"}},"visibility":"private"},{"name":"in_commitment_bliding","type":{"kind":"field"},"visibility":"private"},{"name":"in_commitment_value","type":{"kind":"field"},"visibility":"private"},{"name":"in_commitment_spending_tracker","type":{"kind":"field"},"visibility":"public"},{"name":"in_allowance_value","type":{"kind":"field"},"visibility":"private"},{"name":"in_allowance_hash","type":{"kind":"field"},"visibility":"public"},{"name":"in_allowance_relationship","type":{"kind":"field"},"visibility":"public"},{"name":"out_allowance_hash","type":{"kind":"field"},"visibility":"public"},{"name":"out_receiver_value","type":{"kind":"field"},"visibility":"private"},{"name":"out_receiver_bliding","type":{"kind":"field"},"visibility":"private"},{"name":"out_receiver_commitment","type":{"kind":"field"},"visibility":"public"},{"name":"out_owner_value","type":{"kind":"field"},"visibility":"private"},{"name":"out_owner_bliding","type":{"kind":"field"},"visibility":"private"},{"name":"out_owner_commitment","type":{"kind":"field"},"visibility":"public"},{"name":"out_root","type":{"kind":"field"},"visibility":"public"},{"name":"out_subtree_root_path","type":{"kind":"array","length":11,"type":{"kind":"field"}},"visibility":"private"},{"name":"out_subtree_direction_selector","type":{"kind":"array","length":11,"type":{"kind":"boolean"}},"visibility":"private"}],"return_type":null,"error_types":{"1766617166191739668":{"error_kind":"string","string":"Invalid UTXO amounts"},"2262927323010417218":{"error_kind":"string","string":"New commits don't belong to new root"},"3532385316123601723":{"error_kind":"string","string":"Invalid output allowance hash"},"3765925724515705448":{"error_kind":"string","string":"Invalid allowance relationship"},"6723502231603746505":{"error_kind":"string","string":"Invalid spending tracker"},"8530396002973566632":{"error_kind":"string","string":"Cannot find input commitment"},"9048419499859208626":{"error_kind":"string","string":"Invalid receiver output commitment"},"10825905883719149556":{"error_kind":"string","string":"Invalid input allowance hash"},"13370804117992790937":{"error_kind":"string","string":"Invalid owner output commitment"},"16860811455173349640":{"error_kind":"string","string":"Missing commitments from old tree in new tree"}}},"bytecode":"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","debug_symbols":"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","file_map":{"26":{"source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"62":{"source":"use common::definitions::{\n    account, allowance_hash, allowance_relationship, commitment, commitment_tracker,\n};\nuse common::merkle_tree::assert_merkle_inclusion;\nuse std::hash::poseidon2::Poseidon2::hash;\n\n// TODO: update before deploying. So far haven't found way to override for testing\nglobal DEPTH: u32 = 12;\n\npub fn main(\n    // account details\n    owner_account: Field,\n    receiver_account: Field,\n    spender_private_key: Field,\n    // input commitment details\n    in_commitment_root: pub Field,\n    in_commitment_path: [Field; DEPTH],\n    in_commitment_direction_selector: [bool; DEPTH],\n    in_commitment_bliding: Field,\n    in_commitment_value: Field,\n    in_commitment_spending_tracker: pub Field,\n    // allowance utxo details\n    in_allowance_value: Field,\n    in_allowance_hash: pub Field,\n    in_allowance_relationship: pub Field,\n    out_allowance_hash: pub Field,\n    // out receiver commitment detailsa\n    out_receiver_value: Field,\n    out_receiver_bliding: Field,\n    out_receiver_commitment: pub Field,\n    // out owner commitment details\n    out_owner_value: Field,\n    out_owner_bliding: Field,\n    out_owner_commitment: pub Field,\n    // output commitment details\n    out_root: pub Field,\n    out_subtree_root_path: [Field; DEPTH - 1], // path of hash(out_owner_commitment, out_receiver_commitment)\n    out_subtree_direction_selector: [bool; DEPTH - 1], // path direction of hash(out_owner_commitment, out_receiver_commitment)\n) {\n    // check in_commitment is included in the root and belongs to sender\n    let in_commitment = commitment(owner_account, in_commitment_value, in_commitment_bliding);\n    assert_merkle_inclusion(\n        in_commitment_root,\n        in_commitment_path,\n        in_commitment_direction_selector,\n        in_commitment,\n        \"Cannot find input commitment\",\n    );\n\n    // check spending tracker to properly nullify commitment is correct\n    assert_eq(\n        in_commitment_spending_tracker,\n        commitment_tracker(in_commitment, in_commitment_bliding),\n        \"Invalid spending tracker\",\n    );\n\n    // check input allowance hash is correct and so we can trust allowance amount. And relationship so we can trust update after\n    let spender_account = account(spender_private_key);\n    assert_eq(\n        in_allowance_hash,\n        allowance_hash(owner_account, spender_account, in_allowance_value),\n        \"Invalid input allowance hash\",\n    );\n    assert_eq(\n        in_allowance_relationship,\n        allowance_relationship(owner_account, spender_account),\n        \"Invalid allowance relationship\",\n    );\n\n    // check commitments utxo\n    assert_eq(in_commitment_value, out_receiver_value + out_owner_value, \"Invalid UTXO amounts\");\n\n    // check allowance utxo\n    let out_allowance_value = in_allowance_value - out_receiver_value;\n    assert_eq(\n        out_allowance_hash,\n        allowance_hash(owner_account, spender_account, out_allowance_value),\n        \"Invalid output allowance hash\",\n    );\n\n    // validate commitment amounts and receivers are correct\n    assert_eq(\n        commitment(owner_account, out_owner_value, out_owner_bliding),\n        out_owner_commitment,\n        \"Invalid owner output commitment\",\n    );\n    assert_eq(\n        commitment(receiver_account, out_receiver_value, out_receiver_bliding),\n        out_receiver_commitment,\n        \"Invalid receiver output commitment\",\n    );\n\n    // check we're inserting in a previously empty subtree\n    let zero_subtree_root = hash([0, 0], 2);\n    assert_merkle_inclusion(\n        in_commitment_root,\n        out_subtree_root_path,\n        out_subtree_direction_selector,\n        zero_subtree_root,\n        \"Missing commitments from old tree in new tree\",\n    );\n\n    // check newly inserted commitments belong to out_root\n    let new_subtree_root = hash([out_owner_commitment, out_receiver_commitment], 2);\n    assert_merkle_inclusion(\n        out_root,\n        out_subtree_root_path,\n        out_subtree_direction_selector,\n        new_subtree_root,\n        \"New commits don't belong to new root\",\n    );\n}\n\n// #[test]\n// fn test_allowed_transfer() {\n//     // generate input amounts\n//     let in_commitment_value = 10;\n//     let in_allowance_value = 10;\n\n//     // output amounts\n//     let out_receiver_value = 2;\n//     let out_owner_value = in_commitment_value - out_receiver_value;\n//     let out_allowance_value = in_allowance_value - out_receiver_value;\n\n//     // accounts details\n//     let spender_private_key = 0;\n//     let spender_account = account(spender_private_key);\n//     let owner_account = account(1);\n\n//     // generate commitment\n//     let in_commitment_bliding = 2;\n//     let in_commitment = commitment(owner_account, in_commitment_value, in_commitment_bliding);\n//     let in_commitment_spending_tracker = commitment_tracker(in_commitment, in_commitment_bliding);\n\n//     // output commitment generation\n//     let receiver_account = account(100);\n//     let out_owner_bliding = 3;\n//     let out_receiver_bliding = 3;\n//     let out_receiver_commitment =\n//         commitment(receiver_account, out_receiver_value, out_receiver_bliding);\n//     let out_owner_commitment = commitment(owner_account, out_owner_value, out_owner_bliding);\n\n//     // old tree\n//     let old_first_level_l = hash([in_commitment, 1], 2);\n//     let old_first_level_r = hash([0, 0], 2);\n//     let in_commitment_root = hash([old_first_level_l, old_first_level_r], 2);\n//     let in_commitment_path = [1, old_first_level_r];\n//     let in_commitment_direction_selector = [false, false];\n\n//     // new tree\n//     let new_first_level_l = hash([in_commitment, 1], 2);\n//     let new_first_level_r = hash([out_owner_commitment, out_receiver_commitment], 2);\n//     let out_root = hash([new_first_level_l, new_first_level_r], 2);\n//     let out_subtree_root_path = [new_first_level_l];\n//     let out_subtree_direction_selector = [true];\n\n//     // in_allowance_hash\n//     let in_allowance_hash = allowance_hash(owner_account, spender_account, in_allowance_value);\n//     let out_allowance_hash = allowance_hash(owner_account, spender_account, out_allowance_value);\n//     let in_allowance_relationship = allowance_relationship(owner_account, spender_account);\n\n//     main(\n//         // input commitment details\n//         owner_account,\n//         receiver_account,\n//         spender_private_key,\n//         in_commitment_root,\n//         in_commitment_path,\n//         in_commitment_direction_selector,\n//         in_commitment_bliding,\n//         in_commitment_value,\n//         in_commitment_spending_tracker,\n//         // allowance utxo details\n//         in_allowance_value,\n//         in_allowance_hash,\n//         in_allowance_relationship,\n//         out_allowance_hash,\n//         // out receiver commitment details\n//         out_receiver_value,\n//         out_receiver_bliding,\n//         out_receiver_commitment,\n//         // out owner commitment details\n//         out_owner_value,\n//         out_owner_bliding,\n//         out_owner_commitment,\n//         // output commitment details\n//         out_root,\n//         out_subtree_root_path,\n//         out_subtree_direction_selector,\n//     );\n// }\n\n// #[test(should_fail_with = \"Invalid UTXO amounts\")]\n// fn test_invalid_utxo_amounts() {\n//     // generate input amounts\n//     let in_commitment_value = 10;\n//     let in_allowance_value = 10;\n\n//     // output amounts\n//     let out_receiver_value = 2;\n//     let out_owner_value = 100; // <------------ Should be: in_commitment_value - out_receiver_value;\n//     let out_allowance_value = in_allowance_value - out_receiver_value;\n\n//     // accounts details\n//     let spender_private_key = 0;\n//     let spender_account = account(spender_private_key);\n//     let owner_account = account(1);\n\n//     // generate commitment\n//     let in_commitment_bliding = 2;\n//     let in_commitment = commitment(owner_account, in_commitment_value, in_commitment_bliding);\n//     let in_commitment_spending_tracker = commitment_tracker(in_commitment, in_commitment_bliding);\n\n//     // output commitment generation\n//     let receiver_account = account(100);\n//     let out_owner_bliding = 3;\n//     let out_receiver_bliding = 3;\n//     let out_receiver_commitment =\n//         commitment(receiver_account, out_receiver_value, out_receiver_bliding);\n//     let out_owner_commitment = commitment(owner_account, out_owner_value, out_owner_bliding);\n\n//     // old tree\n//     let old_first_level_l = hash([in_commitment, 1], 2);\n//     let old_first_level_r = hash([0, 0], 2);\n//     let in_commitment_root = hash([old_first_level_l, old_first_level_r], 2);\n//     let in_commitment_path = [1, old_first_level_r];\n//     let in_commitment_direction_selector = [false, false];\n\n//     // new tree\n//     let new_first_level_l = hash([in_commitment, 1], 2);\n//     let new_first_level_r = hash([out_owner_commitment, out_receiver_commitment], 2);\n//     let out_root = hash([new_first_level_l, new_first_level_r], 2);\n//     let out_subtree_root_path = [new_first_level_l];\n//     let out_subtree_direction_selector = [true];\n\n//     // in_allowance_hash\n//     let in_allowance_hash = allowance_hash(owner_account, spender_account, in_allowance_value);\n//     let out_allowance_hash = allowance_hash(owner_account, spender_account, out_allowance_value);\n//     let in_allowance_relationship = allowance_relationship(owner_account, spender_account);\n\n//     main(\n//         // input commitment details\n//         owner_account,\n//         receiver_account,\n//         spender_private_key,\n//         in_commitment_root,\n//         in_commitment_path,\n//         in_commitment_direction_selector,\n//         in_commitment_bliding,\n//         in_commitment_value,\n//         in_commitment_spending_tracker,\n//         // allowance utxo details\n//         in_allowance_value,\n//         in_allowance_hash,\n//         in_allowance_relationship,\n//         out_allowance_hash,\n//         // out receiver commitment details\n//         out_receiver_value,\n//         out_receiver_bliding,\n//         out_receiver_commitment,\n//         // out owner commitment details\n//         out_owner_value,\n//         out_owner_bliding,\n//         out_owner_commitment,\n//         // output commitment details\n//         out_root,\n//         out_subtree_root_path,\n//         out_subtree_direction_selector,\n//     );\n// }\n\n// #[test(should_fail_with = \"Missing commitments from old tree in new tree\")]\n// fn test_remove_existing_commitments() {\n//     // generate input amounts\n//     let in_commitment_value = 10;\n//     let in_allowance_value = 10;\n\n//     // output amounts\n//     let out_receiver_value = 2;\n//     let out_owner_value = in_commitment_value - out_receiver_value;\n//     let out_allowance_value = in_allowance_value - out_receiver_value;\n\n//     // accounts details\n//     let spender_private_key = 0;\n//     let spender_account = account(spender_private_key);\n//     let owner_account = account(1);\n\n//     // generate commitment\n//     let in_commitment_bliding = 2;\n//     let in_commitment = commitment(owner_account, in_commitment_value, in_commitment_bliding);\n//     let in_commitment_spending_tracker = commitment_tracker(in_commitment, in_commitment_bliding);\n\n//     // output commitment generation\n//     let receiver_account = account(100);\n//     let out_owner_bliding = 3;\n//     let out_receiver_bliding = 3;\n//     let out_receiver_commitment =\n//         commitment(receiver_account, out_receiver_value, out_receiver_bliding);\n//     let out_owner_commitment = commitment(owner_account, out_owner_value, out_owner_bliding);\n\n//     // old tree\n//     let old_first_level_l = hash([in_commitment, 1], 2);\n//     let old_first_level_r = hash([0, 0], 2);\n//     let in_commitment_root = hash([old_first_level_l, old_first_level_r], 2);\n//     let in_commitment_path = [1, old_first_level_r];\n//     let in_commitment_direction_selector = [false, false];\n\n//     // new tree\n//     let new_first_level_l = hash([0, 1], 2); // <------------------------ removed input_commitment\n//     let new_first_level_r = hash([out_owner_commitment, out_receiver_commitment], 2);\n//     let out_root = hash([new_first_level_l, new_first_level_r], 2);\n//     let out_subtree_root_path = [new_first_level_l];\n//     let out_subtree_direction_selector = [true];\n\n//     // in_allowance_hash\n//     let in_allowance_hash = allowance_hash(owner_account, spender_account, in_allowance_value);\n//     let out_allowance_hash = allowance_hash(owner_account, spender_account, out_allowance_value);\n//     let in_allowance_relationship = allowance_relationship(owner_account, spender_account);\n\n//     main(\n//         // input commitment details\n//         owner_account,\n//         receiver_account,\n//         spender_private_key,\n//         in_commitment_root,\n//         in_commitment_path,\n//         in_commitment_direction_selector,\n//         in_commitment_bliding,\n//         in_commitment_value,\n//         in_commitment_spending_tracker,\n//         // allowance utxo details\n//         in_allowance_value,\n//         in_allowance_hash,\n//         in_allowance_relationship,\n//         out_allowance_hash,\n//         // out receiver commitment details\n//         out_receiver_value,\n//         out_receiver_bliding,\n//         out_receiver_commitment,\n//         // out owner commitment details\n//         out_owner_value,\n//         out_owner_bliding,\n//         out_owner_commitment,\n//         // output commitment details\n//         out_root,\n//         out_subtree_root_path,\n//         out_subtree_direction_selector,\n//     );\n// }\n","path":"/Users/matzapata/git-work/starkware/starkware-private-erc20/packages/circuits/transfer_from/src/main.nr"},"64":{"source":"use std::hash::poseidon2::Poseidon2::hash;\n\n// account = hash(private_key) \npub fn account(private_key: Field) -> Field {\n    hash([private_key], 1)\n}\n\n// commitment = hash(owner, bliding, amount) // bliding = random number that makes commitment unique\npub fn commitment(owner: Field, value: Field, bliding: Field) -> Field {\n    hash([owner, value, bliding], 3)\n}\n\n// commitment_tracker = hash(commitment, bliding) // same bliding as for commitment\npub fn commitment_tracker(commitment: Field, bliding: Field) -> Field {\n    hash([commitment, bliding], 3)\n}\n\n// allowance_hash = hash(owner, spender, value)\npub fn allowance_hash(owner: Field, spender: Field, value: Field) -> Field {\n    hash([owner, spender, value], 3)\n}\n\n// allowance_relationship = hash(owner, spender)\npub fn allowance_relationship(owner: Field, spender: Field) -> Field {\n    hash([owner, spender], 2)\n}\n","path":"/Users/matzapata/git-work/starkware/starkware-private-erc20/packages/circuits/common/src/definitions.nr"},"65":{"source":"use std::hash::poseidon2::Poseidon2::hash;\n\npub fn assert_merkle_inclusion<let N: u32>(\n    root: Field,\n    path: [Field],\n    direction_selector: [bool],\n    leaf: Field,\n    failure_message: str<N>\n) {\n    assert(path.len() == direction_selector.len());\n    \n    let mut digest = leaf;\n    for i in 0..path.len() {\n        let (left, right) = if direction_selector[i] {\n            (path[i], digest)\n        } else {\n            (digest, path[i])\n        };\n\n        digest = hash([left, right], 2);\n    }\n\n    assert(digest == root, failure_message);\n}\n\npub fn find_leaf_index(direction_selector: [bool]) -> Field {\n    let mut index: u32 = 0;\n    let depth = direction_selector.len();\n\n    for i in 0..depth {\n        let pos = depth - 1 - i;\n        index = index * 2;\n        if direction_selector[pos] {\n            index = index + 1;\n        }\n    }\n    index as Field\n}\n\n// assert merkle inclusion tests\n\n#[test]\nfn should_be_included() {\n    let first_level_l = hash([hash([1], 1), hash([0], 1)], 2);\n    let first_level_r = hash([hash([0], 1), hash([0], 1)], 2);\n    let root = hash([first_level_l, first_level_r], 2);\n\n    let path: [Field; 2] = [ hash([0], 1), first_level_r ];\n    let direction_selector: [bool; 2] = [ false, false ];\n\n    assert_merkle_inclusion(root, path, direction_selector, hash([1], 1), \"Failed\");\n}\n\n\n#[test(should_fail_with=\"Failed\")]\nfn should_not_included() {\n    let first_level_l = hash([hash([1], 1), hash([0], 1)], 2);\n    let first_level_r = hash([hash([0], 1), hash([0], 1)], 2);\n    let root = hash([first_level_l, first_level_r], 2);\n\n    let path: [Field; 2] = [ hash([0], 1), first_level_r ];\n    let direction_selector: [bool; 2] = [ false, false ];\n\n    assert_merkle_inclusion(root, path, direction_selector, hash([100], 1), \"Failed\");\n}\n\n// generate index tests\n\n#[test]\nfn test_generate_index_case1() {\n    let directions: [bool; 2] = [true, false];\n    let index = find_leaf_index(directions);\n    assert(index == 1);\n}\n\n#[test]\nfn test_generate_index_case2() {\n    let directions: [bool; 2] = [false, true];\n    let index = find_leaf_index(directions);\n    assert(index == 2);\n}","path":"/Users/matzapata/git-work/starkware/starkware-private-erc20/packages/circuits/common/src/merkle_tree.nr"}},"names":["main"],"brillig_names":[]}
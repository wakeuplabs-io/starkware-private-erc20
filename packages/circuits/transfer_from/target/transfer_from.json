{"noir_version":"1.0.0-beta.1+03b58fa2dfcc8acc8cf5198b1b23b55676fbdb02","hash":9595693235085979165,"abi":{"parameters":[{"name":"owner_account","type":{"kind":"field"},"visibility":"private"},{"name":"receiver_account","type":{"kind":"field"},"visibility":"private"},{"name":"spender_private_key","type":{"kind":"field"},"visibility":"private"},{"name":"in_commitment_root","type":{"kind":"field"},"visibility":"public"},{"name":"in_commitment_path","type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"private"},{"name":"in_commitment_direction_selector","type":{"kind":"array","length":2,"type":{"kind":"boolean"}},"visibility":"private"},{"name":"in_commitment_bliding","type":{"kind":"field"},"visibility":"private"},{"name":"in_commitment_value","type":{"kind":"field"},"visibility":"private"},{"name":"in_commitment_spending_tracker","type":{"kind":"field"},"visibility":"public"},{"name":"in_allowance_value","type":{"kind":"field"},"visibility":"private"},{"name":"in_allowance_hash","type":{"kind":"field"},"visibility":"public"},{"name":"in_allowance_relationship","type":{"kind":"field"},"visibility":"public"},{"name":"out_allowance_hash","type":{"kind":"field"},"visibility":"public"},{"name":"out_receiver_value","type":{"kind":"field"},"visibility":"private"},{"name":"out_receiver_bliding","type":{"kind":"field"},"visibility":"private"},{"name":"out_receiver_commitment","type":{"kind":"field"},"visibility":"public"},{"name":"out_owner_value","type":{"kind":"field"},"visibility":"private"},{"name":"out_owner_bliding","type":{"kind":"field"},"visibility":"private"},{"name":"out_owner_commitment","type":{"kind":"field"},"visibility":"public"},{"name":"out_root","type":{"kind":"field"},"visibility":"public"},{"name":"out_subtree_root_path","type":{"kind":"array","length":1,"type":{"kind":"field"}},"visibility":"private"},{"name":"out_subtree_direction_selector","type":{"kind":"array","length":1,"type":{"kind":"boolean"}},"visibility":"private"}],"return_type":null,"error_types":{"1766617166191739668":{"error_kind":"string","string":"Invalid UTXO amounts"},"2262927323010417218":{"error_kind":"string","string":"New commits don't belong to new root"},"3532385316123601723":{"error_kind":"string","string":"Invalid output allowance hash"},"3765925724515705448":{"error_kind":"string","string":"Invalid allowance relationship"},"6723502231603746505":{"error_kind":"string","string":"Invalid spending tracker"},"8530396002973566632":{"error_kind":"string","string":"Cannot find input commitment"},"9048419499859208626":{"error_kind":"string","string":"Invalid receiver output commitment"},"10825905883719149556":{"error_kind":"string","string":"Invalid input allowance hash"},"13370804117992790937":{"error_kind":"string","string":"Invalid owner output commitment"},"16860811455173349640":{"error_kind":"string","string":"Missing commitments from old tree in new tree"}}},"bytecode":"H4sIAAAAAAAA/+1bvW8cRRQf3+GQ2ATHxsE2EJwPjO2A8cx+L3bAiQPYgQQC5IM4gez5dhODKNzQgSgoaACJIoLWSCgNQqKDkgIpJeJfSEMNIhVR3otnope7tXPxvnG80o3008zt3M29+f3evHm7c9chVssyYFa3q7qu6PohQKdud+h+rLfpml57uOG1GWOb7jPjV3Q/lsdzxh4gr6vkvQOiuZi+GV27MvC8NHRS5apEOnEt8qXn14JIRcqP/LoTuW4aeVEY1+JQxspzU5X5sZvJ1TJIxpL3V9zGC2hbn+aQ2npTt3eQ9nbSHtRt87khwBOAJwFPkeu2ONizcQ6aSkXkF67x1+JAFiuKkwNbNj5twUYrDjXMOOmyOtRwCWzcy2kjRm7cOYxg6K17dZvuAGUSsQxRYR+njWUVqgyrbb9gXm2YZ5nVhl6wX7cruq9sIpZhtR0QzKutU7SFsmHjM22hyiHUCLeN3Nks3o4dsDDuh8wTtxHqcBVVmccdYuTwWUa7bOtRdK6ox4gFPUYYbRzdwuvDFG5dxjZup9N4Ie8REvq4eVQ0Stp7SHtM3P0IaRxwEPAc4Hl9vaxpYRly+wnRzjZ4SbBk4wvCTlC5cyNmBi8aVSYYx5pkJLCszjlZAhslt43cWx1uKxMWxv1Y2E29ZLFyO7Jh5OBOvcYZOVSMdtnWgyM4Sgt6SEYbnS26PvJSTPQdk0o6orUU0wV4AB8QiOZTSu4Nscqos2uZzyGRf9I7LNY+9Q0BESAGvNgCn7JYUV2M2oSCf3M1XHL60NTG7VSNF/J0r4j8tUPbUw26TwMOAV4CvKyv3+uXBNOk3b2OT80ADgOOiNVffNj2qUcYtZoRdtfoWnyuF/OOAl4BvAp4bRP43MnI51FhZ41y78E7GOfcwzhWX0n4696i/M2JB7Oe58Ta8XEecAzwOuANYX89P8rI57zYPD77SPuxdfg8DjgBeBPwlrCfE/YzanPcMp8dhLce0t61Dp8nAW8D3gG8uwl89jLyeZKRzwqZKy1c4wuiE+O4pTh/PcVpY1U7tDHyFHHUqmgLaMPG09wC9hIjTxMBe0VbQBs2nuG0EYXaJdpC2bDxbFuocgj1HreNNpY8elNjAuf4UiaxW/MTJ4N8LXMcJ5AySiB5yxIvC9K66y1GXpIuBl4gXXjlu1GW+WFYD5JYSRpKiiaD5+h8a4Gb+G4YhdJRiZfEgZN4vrPoxI6quQF0ZpnKsnpU930lfU9mURr4cRpGTuwHmcrjsKh9OFcUuukGuqCtjOH4LkcsOt8FRqfOu0FBvc2NyIJo7YHYecAFwPuAD0S5DgHOW+azn/DW2yKfFwEJoAZYFM035DNMPJ7R38U97rLgDby24i73Q7eLjBzWGe2yrYe1GF6ssMbddIuuj7yYg75jYksqWos5GeAS4DJgSdiP4bsZdc6Y+TRzp4m5Odgzf402f2/Gg108rMAH7j36M6gHPiDFvzkP6PdgQf/GA1c8IMNDHXwQjHsC7hG7yXd1kfY+XV/948ebN3bWPiFdt3+PjuXalXl19acTF2jfqK7/Hb3e1X320BXaN67ryyuz9c8Oz3q076Cu+2dvXP9n7otB2jeh66mPzl377atORfsmdf39wrH/Pv/h619pn3njL0t/ud8tf/sp7ZvW9fY/l1d+Xvn/b9p3xNS/fzO29OWlYdFQbgE+7i4Qyz4AAA==","debug_symbols":"7ZrbrqowFEX/hWcf2nXpxV85OdnxukNi1Hg5yYnx3ze6bYFaIIK+NDwia05hUDrbpZdsuZqfv7/y7Xp3zKZ/Ltlmt5id8t22OLpk+v7RcT/b3o6Op9nhlE2R1SRbbZfZlEBcJ9k636yyKajr5KkUNLha0NRRLLXBR7E0AjqKhXeWQnNHMTO7YgXkixVEihHFoxZVeRGKrn8nmRl51HjYGA+prHTuWtiqeyGRoodG9tBADw320FBUo6X1GpahhntoVA+Njt+Pf6LSgOx4+uT8UZfjVfHd3gy3N27UosXQ3g62J3JPjsgE9iASeZlfAqLd42QhQyByBFIHAiOQOhAcgdSB0AikDoQ/mjigPpo4oD+bOOaz9nYcjDUgOCZ8AGRM+ADImPABEBw8RTG4KYqRQ/tU8tKyYwhCchcQZ8ysgg00xvPSyib7m0alARFA+ssA6uhCyNK4Gny/EBNpU70PSCJ9KgDrL6PWfIoBUca9M7o6Rf0CiS6NAJRtsC80lMjqAai8SwZsh2j84ttoCiBSdPUAhNRgf9NEAxZUOb8prUJNIrtMMOzJ2K7UbBu9lEhqvg9INDXBlHcZ2N80iaQmCn/JKKXu2Oy29O4pnppVe9IhxESCBQHA3WUxVgZAjO+5K/YI4fqNG4KF/dewDkcvyx6ahs2Nkf525JMGe2ji0xOZSh+nC3FLz4d5uH1Lz4fVYPu2pgwnsjZ9DUjLDpNTmULeBiSRtt3bgCgx+I1s60GoRJpgqP3P0mieklol0tlCw86ZBKkBoyqRXcX7gNAIpA6ERyB1IPGl0Sv2zRNxcTA/5JtN/v1V/ctZ8fG/2SGfzTerx+H6vF1Uzp7+790Zp98fdovV8nxY3Zzu5wr7Hw==","file_map":{"26":{"source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"62":{"source":"use common::definitions::{\n    account, allowance_hash, allowance_relationship, commitment, commitment_tracker,\n};\nuse common::merkle_tree::assert_merkle_inclusion;\nuse std::hash::poseidon2::Poseidon2::hash;\n\n// TODO: update before deploying. So far haven't found way to override for testing\nglobal DEPTH: u32 = 2;\n\npub fn main(\n    // account details\n    owner_account: Field,\n    receiver_account: Field,\n    spender_private_key: Field,\n    // input commitment details\n    in_commitment_root: pub Field,\n    in_commitment_path: [Field; DEPTH],\n    in_commitment_direction_selector: [bool; DEPTH],\n    in_commitment_bliding: Field,\n    in_commitment_value: Field,\n    in_commitment_spending_tracker: pub Field,\n    // allowance utxo details\n    in_allowance_value: Field,\n    in_allowance_hash: pub Field,\n    in_allowance_relationship: pub Field,\n    out_allowance_hash: pub Field,\n    // out receiver commitment details\n    out_receiver_value: Field,\n    out_receiver_bliding: Field,\n    out_receiver_commitment: pub Field,\n    // out owner commitment details\n    out_owner_value: Field,\n    out_owner_bliding: Field,\n    out_owner_commitment: pub Field,\n    // output commitment details\n    out_root: pub Field,\n    out_subtree_root_path: [Field; DEPTH - 1], // path of hash(out_owner_commitment, out_receiver_commitment)\n    out_subtree_direction_selector: [bool; DEPTH - 1], // path direction of hash(out_owner_commitment, out_receiver_commitment)\n) {\n    // check in_commitment is included in the root and belongs to sender\n    let in_commitment = commitment(owner_account, in_commitment_value, in_commitment_bliding);\n    assert_merkle_inclusion(\n        in_commitment_root,\n        in_commitment_path,\n        in_commitment_direction_selector,\n        in_commitment,\n        \"Cannot find input commitment\",\n    );\n\n    // check spending tracker to properly nullify commitment is correct\n    assert_eq(\n        in_commitment_spending_tracker,\n        commitment_tracker(in_commitment, in_commitment_bliding),\n        \"Invalid spending tracker\",\n    );\n\n    // check input allowance hash is correct and so we can trust allowance amount. And relationship so we can trust update after\n    let spender_account = account(spender_private_key);\n    assert_eq(\n        in_allowance_hash,\n        allowance_hash(owner_account, spender_account, in_allowance_value),\n        \"Invalid input allowance hash\",\n    );\n    assert_eq(\n        in_allowance_relationship,\n        allowance_relationship(owner_account, spender_account),\n        \"Invalid allowance relationship\",\n    );\n\n    // check commitments utxo\n    assert_eq(in_commitment_value, out_receiver_value + out_owner_value, \"Invalid UTXO amounts\");\n\n    // check allowance utxo\n    let out_allowance_value = in_allowance_value - out_receiver_value;\n    assert_eq(\n        out_allowance_hash,\n        allowance_hash(owner_account, spender_account, out_allowance_value),\n        \"Invalid output allowance hash\",\n    );\n\n    // validate commitment amounts and receivers are correct\n    assert_eq(\n        commitment(owner_account, out_owner_value, out_owner_bliding),\n        out_owner_commitment,\n        \"Invalid owner output commitment\",\n    );\n    assert_eq(\n        commitment(receiver_account, out_receiver_value, out_receiver_bliding),\n        out_receiver_commitment,\n        \"Invalid receiver output commitment\",\n    );\n\n    // check we're inserting in a previously empty subtree\n    let zero_subtree_root = hash([0, 0], 2);\n    assert_merkle_inclusion(\n        in_commitment_root,\n        out_subtree_root_path,\n        out_subtree_direction_selector,\n        zero_subtree_root,\n        \"Missing commitments from old tree in new tree\",\n    );\n\n    // check newly inserted commitments belong to out_root\n    let new_subtree_root = hash([out_owner_commitment, out_receiver_commitment], 2);\n    assert_merkle_inclusion(\n        out_root,\n        out_subtree_root_path,\n        out_subtree_direction_selector,\n        new_subtree_root,\n        \"New commits don't belong to new root\",\n    );\n}\n\n#[test]\nfn test_allowed_transfer() {\n    // generate input amounts\n    let in_commitment_value = 10;\n    let in_allowance_value = 10;\n\n    // output amounts\n    let out_receiver_value = 2;\n    let out_owner_value = in_commitment_value - out_receiver_value;\n    let out_allowance_value = in_allowance_value - out_receiver_value;\n\n    // accounts details\n    let spender_private_key = 0;\n    let spender_account = account(spender_private_key);\n    let owner_account = account(1);\n\n    // generate commitment\n    let in_commitment_bliding = 2;\n    let in_commitment = commitment(owner_account, in_commitment_value, in_commitment_bliding);\n    let in_commitment_spending_tracker = commitment_tracker(in_commitment, in_commitment_bliding);\n\n    // output commitment generation\n    let receiver_account = account(100);\n    let out_owner_bliding = 3;\n    let out_receiver_bliding = 3;\n    let out_receiver_commitment =\n        commitment(receiver_account, out_receiver_value, out_receiver_bliding);\n    let out_owner_commitment = commitment(owner_account, out_owner_value, out_owner_bliding);\n\n    // old tree\n    let old_first_level_l = hash([in_commitment, 1], 2);\n    let old_first_level_r = hash([0, 0], 2);\n    let in_commitment_root = hash([old_first_level_l, old_first_level_r], 2);\n    let in_commitment_path = [1, old_first_level_r];\n    let in_commitment_direction_selector = [false, false];\n\n    // new tree\n    let new_first_level_l = hash([in_commitment, 1], 2);\n    let new_first_level_r = hash([out_owner_commitment, out_receiver_commitment], 2);\n    let out_root = hash([new_first_level_l, new_first_level_r], 2);\n    let out_subtree_root_path = [new_first_level_l];\n    let out_subtree_direction_selector = [true];\n\n    // in_allowance_hash\n    let in_allowance_hash = allowance_hash(owner_account, spender_account, in_allowance_value);\n    let out_allowance_hash = allowance_hash(owner_account, spender_account, out_allowance_value);\n    let in_allowance_relationship = allowance_relationship(owner_account, spender_account);\n\n    main(\n        // input commitment details\n        owner_account,\n        receiver_account,\n        spender_private_key,\n        in_commitment_root,\n        in_commitment_path,\n        in_commitment_direction_selector,\n        in_commitment_bliding,\n        in_commitment_value,\n        in_commitment_spending_tracker,\n        // allowance utxo details\n        in_allowance_value,\n        in_allowance_hash,\n        in_allowance_relationship,\n        out_allowance_hash,\n        // out receiver commitment details\n        out_receiver_value,\n        out_receiver_bliding,\n        out_receiver_commitment,\n        // out owner commitment details\n        out_owner_value,\n        out_owner_bliding,\n        out_owner_commitment,\n        // output commitment details\n        out_root,\n        out_subtree_root_path,\n        out_subtree_direction_selector,\n    );\n}\n\n#[test(should_fail_with = \"Invalid UTXO amounts\")]\nfn test_invalid_utxo_amounts() {\n    // generate input amounts\n    let in_commitment_value = 10;\n    let in_allowance_value = 10;\n\n    // output amounts\n    let out_receiver_value = 2;\n    let out_owner_value = 100; // <------------ Should be: in_commitment_value - out_receiver_value;\n    let out_allowance_value = in_allowance_value - out_receiver_value;\n\n    // accounts details\n    let spender_private_key = 0;\n    let spender_account = account(spender_private_key);\n    let owner_account = account(1);\n\n    // generate commitment\n    let in_commitment_bliding = 2;\n    let in_commitment = commitment(owner_account, in_commitment_value, in_commitment_bliding);\n    let in_commitment_spending_tracker = commitment_tracker(in_commitment, in_commitment_bliding);\n\n    // output commitment generation\n    let receiver_account = account(100);\n    let out_owner_bliding = 3;\n    let out_receiver_bliding = 3;\n    let out_receiver_commitment =\n        commitment(receiver_account, out_receiver_value, out_receiver_bliding);\n    let out_owner_commitment = commitment(owner_account, out_owner_value, out_owner_bliding);\n\n    // old tree\n    let old_first_level_l = hash([in_commitment, 1], 2);\n    let old_first_level_r = hash([0, 0], 2);\n    let in_commitment_root = hash([old_first_level_l, old_first_level_r], 2);\n    let in_commitment_path = [1, old_first_level_r];\n    let in_commitment_direction_selector = [false, false];\n\n    // new tree\n    let new_first_level_l = hash([in_commitment, 1], 2);\n    let new_first_level_r = hash([out_owner_commitment, out_receiver_commitment], 2);\n    let out_root = hash([new_first_level_l, new_first_level_r], 2);\n    let out_subtree_root_path = [new_first_level_l];\n    let out_subtree_direction_selector = [true];\n\n    // in_allowance_hash\n    let in_allowance_hash = allowance_hash(owner_account, spender_account, in_allowance_value);\n    let out_allowance_hash = allowance_hash(owner_account, spender_account, out_allowance_value);\n    let in_allowance_relationship = allowance_relationship(owner_account, spender_account);\n\n    main(\n        // input commitment details\n        owner_account,\n        receiver_account,\n        spender_private_key,\n        in_commitment_root,\n        in_commitment_path,\n        in_commitment_direction_selector,\n        in_commitment_bliding,\n        in_commitment_value,\n        in_commitment_spending_tracker,\n        // allowance utxo details\n        in_allowance_value,\n        in_allowance_hash,\n        in_allowance_relationship,\n        out_allowance_hash,\n        // out receiver commitment details\n        out_receiver_value,\n        out_receiver_bliding,\n        out_receiver_commitment,\n        // out owner commitment details\n        out_owner_value,\n        out_owner_bliding,\n        out_owner_commitment,\n        // output commitment details\n        out_root,\n        out_subtree_root_path,\n        out_subtree_direction_selector,\n    );\n}\n\n#[test(should_fail_with = \"Missing commitments from old tree in new tree\")]\nfn test_remove_existing_commitments() {\n    // generate input amounts\n    let in_commitment_value = 10;\n    let in_allowance_value = 10;\n\n    // output amounts\n    let out_receiver_value = 2;\n    let out_owner_value = in_commitment_value - out_receiver_value;\n    let out_allowance_value = in_allowance_value - out_receiver_value;\n\n    // accounts details\n    let spender_private_key = 0;\n    let spender_account = account(spender_private_key);\n    let owner_account = account(1);\n\n    // generate commitment\n    let in_commitment_bliding = 2;\n    let in_commitment = commitment(owner_account, in_commitment_value, in_commitment_bliding);\n    let in_commitment_spending_tracker = commitment_tracker(in_commitment, in_commitment_bliding);\n\n    // output commitment generation\n    let receiver_account = account(100);\n    let out_owner_bliding = 3;\n    let out_receiver_bliding = 3;\n    let out_receiver_commitment =\n        commitment(receiver_account, out_receiver_value, out_receiver_bliding);\n    let out_owner_commitment = commitment(owner_account, out_owner_value, out_owner_bliding);\n\n    // old tree\n    let old_first_level_l = hash([in_commitment, 1], 2);\n    let old_first_level_r = hash([0, 0], 2);\n    let in_commitment_root = hash([old_first_level_l, old_first_level_r], 2);\n    let in_commitment_path = [1, old_first_level_r];\n    let in_commitment_direction_selector = [false, false];\n\n    // new tree\n    let new_first_level_l = hash([0, 1], 2); // <------------------------ removed input_commitment\n    let new_first_level_r = hash([out_owner_commitment, out_receiver_commitment], 2);\n    let out_root = hash([new_first_level_l, new_first_level_r], 2);\n    let out_subtree_root_path = [new_first_level_l];\n    let out_subtree_direction_selector = [true];\n\n    // in_allowance_hash\n    let in_allowance_hash = allowance_hash(owner_account, spender_account, in_allowance_value);\n    let out_allowance_hash = allowance_hash(owner_account, spender_account, out_allowance_value);\n    let in_allowance_relationship = allowance_relationship(owner_account, spender_account);\n\n    main(\n        // input commitment details\n        owner_account,\n        receiver_account,\n        spender_private_key,\n        in_commitment_root,\n        in_commitment_path,\n        in_commitment_direction_selector,\n        in_commitment_bliding,\n        in_commitment_value,\n        in_commitment_spending_tracker,\n        // allowance utxo details\n        in_allowance_value,\n        in_allowance_hash,\n        in_allowance_relationship,\n        out_allowance_hash,\n        // out receiver commitment details\n        out_receiver_value,\n        out_receiver_bliding,\n        out_receiver_commitment,\n        // out owner commitment details\n        out_owner_value,\n        out_owner_bliding,\n        out_owner_commitment,\n        // output commitment details\n        out_root,\n        out_subtree_root_path,\n        out_subtree_direction_selector,\n    );\n}\n","path":"/Users/matzapata/git-work/starkware/starkware-private-erc20/packages/circuits/transfer_from/src/main.nr"},"64":{"source":"use std::hash::poseidon2::Poseidon2::hash;\n\n// account = hash(private_key) \npub fn account(private_key: Field) -> Field {\n    hash([private_key], 1)\n}\n\n// commitment = hash(owner, bliding, amount) // bliding = random number that makes commitment unique\npub fn commitment(owner: Field, value: Field, bliding: Field) -> Field {\n    hash([owner, value, bliding], 3)\n}\n\n// commitment_tracker = hash(commitment, bliding) // same bliding as for commitment\npub fn commitment_tracker(commitment: Field, bliding: Field) -> Field {\n    hash([commitment, bliding], 3)\n}\n\n// allowance_hash = hash(owner, spender, value)\npub fn allowance_hash(owner: Field, spender: Field, value: Field) -> Field {\n    hash([owner, spender, value], 3)\n}\n\n// allowance_relationship = hash(owner, spender)\npub fn allowance_relationship(owner: Field, spender: Field) -> Field {\n    hash([owner, spender], 2)\n}\n","path":"/Users/matzapata/git-work/starkware/starkware-private-erc20/packages/circuits/common/src/definitions.nr"},"65":{"source":"use std::hash::poseidon2::Poseidon2::hash;\n\npub fn assert_merkle_inclusion<let N: u32>(\n    root: Field,\n    path: [Field],\n    direction_selector: [bool],\n    leaf: Field,\n    failure_message: str<N>\n) {\n    assert(path.len() == direction_selector.len());\n    \n    let mut digest = leaf;\n    for i in 0..path.len() {\n        let (left, right) = if direction_selector[i] {\n            (path[i], digest)\n        } else {\n            (digest, path[i])\n        };\n\n        digest = hash([left, right], 2);\n    }\n\n    assert(digest == root, failure_message);\n}\n\npub fn find_leaf_index(direction_selector: [bool]) -> Field {\n    let mut index: u32 = 0;\n    let depth = direction_selector.len();\n\n    for i in 0..depth {\n        let pos = depth - 1 - i;\n        index = index * 2;\n        if direction_selector[pos] {\n            index = index + 1;\n        }\n    }\n    index as Field\n}\n\n// assert merkle inclusion tests\n\n#[test]\nfn should_be_included() {\n    let first_level_l = hash([hash([1], 1), hash([0], 1)], 2);\n    let first_level_r = hash([hash([0], 1), hash([0], 1)], 2);\n    let root = hash([first_level_l, first_level_r], 2);\n\n    let path: [Field; 2] = [ hash([0], 1), first_level_r ];\n    let direction_selector: [bool; 2] = [ false, false ];\n\n    assert_merkle_inclusion(root, path, direction_selector, hash([1], 1), \"Failed\");\n}\n\n\n#[test(should_fail_with=\"Failed\")]\nfn should_not_included() {\n    let first_level_l = hash([hash([1], 1), hash([0], 1)], 2);\n    let first_level_r = hash([hash([0], 1), hash([0], 1)], 2);\n    let root = hash([first_level_l, first_level_r], 2);\n\n    let path: [Field; 2] = [ hash([0], 1), first_level_r ];\n    let direction_selector: [bool; 2] = [ false, false ];\n\n    assert_merkle_inclusion(root, path, direction_selector, hash([100], 1), \"Failed\");\n}\n\n// generate index tests\n\n#[test]\nfn test_generate_index_case1() {\n    let directions: [bool; 2] = [true, false];\n    let index = find_leaf_index(directions);\n    assert(index == 1);\n}\n\n#[test]\nfn test_generate_index_case2() {\n    let directions: [bool; 2] = [false, true];\n    let index = find_leaf_index(directions);\n    assert(index == 2);\n}","path":"/Users/matzapata/git-work/starkware/starkware-private-erc20/packages/circuits/common/src/merkle_tree.nr"}},"names":["main"],"brillig_names":[]}
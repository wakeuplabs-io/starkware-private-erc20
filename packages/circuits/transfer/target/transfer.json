{"noir_version":"1.0.0-beta.1+03b58fa2dfcc8acc8cf5198b1b23b55676fbdb02","hash":13676310962131923606,"abi":{"parameters":[{"name":"sender_private_key","type":{"kind":"field"},"visibility":"private"},{"name":"receiver_account","type":{"kind":"field"},"visibility":"private"},{"name":"in_commitment_root","type":{"kind":"field"},"visibility":"public"},{"name":"in_commitment_path","type":{"kind":"array","length":12,"type":{"kind":"field"}},"visibility":"private"},{"name":"in_commitment_direction_selector","type":{"kind":"array","length":12,"type":{"kind":"boolean"}},"visibility":"private"},{"name":"in_commitment_value","type":{"kind":"field"},"visibility":"private"},{"name":"in_commitment_bliding","type":{"kind":"field"},"visibility":"private"},{"name":"in_commitment_spending_tracker","type":{"kind":"field"},"visibility":"public"},{"name":"out_receiver_commitment_value","type":{"kind":"field"},"visibility":"private"},{"name":"out_receiver_commitment_bliding","type":{"kind":"field"},"visibility":"private"},{"name":"out_receiver_commitment","type":{"kind":"field"},"visibility":"public"},{"name":"out_sender_commitment_value","type":{"kind":"field"},"visibility":"private"},{"name":"out_sender_commitment_bliding","type":{"kind":"field"},"visibility":"private"},{"name":"out_sender_commitment","type":{"kind":"field"},"visibility":"public"},{"name":"out_root","type":{"kind":"field"},"visibility":"public"},{"name":"out_subtree_root_path","type":{"kind":"array","length":11,"type":{"kind":"field"}},"visibility":"private"},{"name":"out_subtree_root_direction_selector","type":{"kind":"array","length":11,"type":{"kind":"boolean"}},"visibility":"private"}],"return_type":null,"error_types":{"624257843267711912":{"error_kind":"string","string":"New commits not included in new root"},"1766617166191739668":{"error_kind":"string","string":"Invalid UTXO amounts"},"11889370444656604730":{"error_kind":"string","string":"Invalid out receiver commitment"},"12827564540088390524":{"error_kind":"string","string":"Invalid commitment tracker"},"14188306708689744993":{"error_kind":"string","string":"Input commitment doesn't belong to tree"},"15449175181940140965":{"error_kind":"string","string":"Invalid out sender commitment"},"16860811455173349640":{"error_kind":"string","string":"Missing commitments from old tree in new tree"}}},"bytecode":"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","debug_symbols":"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","file_map":{"26":{"source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"62":{"source":"use common::definitions::{account, commitment, commitment_tracker};\nuse common::merkle_tree::{assert_merkle_inclusion};\nuse std::hash::poseidon2::Poseidon2::hash;\n\n// TODO: update before deploying. So far haven't found way to override for testing\nglobal DEPTH: u32 = 12;\n\npub fn main(\n    // accounts details\n    sender_private_key: Field,\n    receiver_account: Field,\n    // utxo inputs\n    in_commitment_root: pub Field,\n    in_commitment_path: [Field; DEPTH],\n    in_commitment_direction_selector: [bool; DEPTH],\n    in_commitment_value: Field,\n    in_commitment_bliding: Field,\n    in_commitment_spending_tracker: pub Field,\n    // utxo outputs\n    out_receiver_commitment_value: Field,\n    out_receiver_commitment_bliding: Field,\n    out_receiver_commitment: pub Field,\n    out_sender_commitment_value: Field,\n    out_sender_commitment_bliding: Field,\n    out_sender_commitment: pub Field,\n    // updated root\n    out_root: pub Field,\n    out_subtree_root_path: [Field; DEPTH - 1], // path of hash(out_sender_commitment, out_receiver_commitment)\n    out_subtree_root_direction_selector: [bool; DEPTH - 1], // path direction of hash(out_sender_commitment, out_receiver_commitment)\n) {\n    // check in_commitment is included in the root and belongs to sender\n    let sender_account = account(sender_private_key);\n    let in_commitment = commitment(sender_account, in_commitment_value, in_commitment_bliding);\n    assert_merkle_inclusion(\n        in_commitment_root,\n        in_commitment_path,\n        in_commitment_direction_selector,\n        in_commitment,\n        \"Input commitment doesn't belong to tree\",\n    );\n    assert_eq(in_commitment_spending_tracker, commitment_tracker(in_commitment, in_commitment_bliding), \"Invalid commitment tracker\");\n\n    // check utxo\n    assert_eq(\n        in_commitment_value,\n        out_receiver_commitment_value + out_sender_commitment_value,\n        \"Invalid UTXO amounts\",\n    );\n\n    // validate commitment amounts and receivers are correct\n    assert_eq(\n        commitment(sender_account, out_sender_commitment_value, out_sender_commitment_bliding),\n        out_sender_commitment,\n          \"Invalid out sender commitment\",\n    );\n    assert_eq(\n        commitment(receiver_account, out_receiver_commitment_value, out_receiver_commitment_bliding),\n        out_receiver_commitment,\n            \"Invalid out receiver commitment\",\n    );\n\n    // check we're inserting in a previously empty subtree\n    let zero_subtree_root = hash([0, 0], 2);\n    assert_merkle_inclusion(\n        in_commitment_root,\n        out_subtree_root_path,\n        out_subtree_root_direction_selector,\n        zero_subtree_root,\n        \"Missing commitments from old tree in new tree\",\n    );\n\n    // check newly inserted commitments belong to out_root\n    let new_subtree_root = hash([out_sender_commitment, out_receiver_commitment], 2);\n    assert_merkle_inclusion(\n        out_root,\n        out_subtree_root_path,\n        out_subtree_root_direction_selector,\n        new_subtree_root,\n        \"New commits not included in new root\",\n    );\n}\n\n// #[test]\n// fn test_allowed_transfer() {\n//     // generate amounts\n//     let in_commitment_value = 10;\n//     let out_receiver_commitment_value = 2;\n//     let out_sender_commitment_value = 8;\n\n//     // account details\n//     let sender_private_key = 1;\n//     let sender_account = account(sender_private_key);\n\n//     // generate commitment\n//     let in_commitment_bliding = 2;\n//     let in_commitment = commitment(sender_account, in_commitment_value, in_commitment_bliding);\n//     let in_commitment_spending_tracker = commitment_tracker(in_commitment, in_commitment_bliding);\n\n//     // output commitment generation\n//     let receiver_account = account(100);\n//     let out_sender_commitment_bliding = 3;\n//     let out_receiver_commitment_bliding = 3;\n//     let out_receiver_commitment =\n//         commitment(receiver_account, out_receiver_commitment_value, out_receiver_commitment_bliding);\n//     let out_sender_commitment = commitment(sender_account, out_sender_commitment_value, out_sender_commitment_bliding);\n\n//     // old tree\n//     let old_first_level_l = hash([in_commitment, 1], 2);\n//     let old_first_level_r = hash([0, 0], 2);\n//     let in_commitment_root = hash([old_first_level_l, old_first_level_r], 2);\n\n//     // new tree\n//     let new_first_level_l = hash([in_commitment, 1], 2);\n//     let new_first_level_r = hash([out_sender_commitment, out_receiver_commitment], 2);\n//     let out_root = hash([new_first_level_l, new_first_level_r], 2);\n\n//     // nullifier\n//     let in_commitment_path = [1, old_first_level_r];\n//     let in_commitment_direction_selector = [false, false];\n\n//     main(\n//         sender_private_key,\n//         receiver_account,\n//         in_commitment_root,\n//         in_commitment_path,\n//         in_commitment_direction_selector,\n//         in_commitment_value,\n//         in_commitment_bliding,\n//         in_commitment_spending_tracker,\n//         out_receiver_commitment_value,\n//         out_receiver_commitment_bliding,\n//         out_receiver_commitment,\n//         out_sender_commitment_value,\n//         out_sender_commitment_bliding,\n//         out_sender_commitment,\n//         out_root,\n//         [new_first_level_l],\n//         [true],\n//     );\n// }\n\n// #[test(should_fail_with = \"Invalid UTXO amounts\")]\n// fn test_invalid_utxo_amounts() {\n//     // generate amounts\n//     let in_commitment_value = 10;\n//     let out_receiver_commitment_value = 2;\n//     let out_sender_commitment_value = 8000; // // <-------------------------------------------- out more than it should\n\n//     // account details\n//     let sender_private_key = 1;\n//     let sender_account = account(sender_private_key);\n\n//     // generate commitment\n//     let in_commitment_bliding = 2;\n//     let in_commitment = commitment(sender_account, in_commitment_value, in_commitment_bliding);\n//     let in_commitment_spending_tracker = commitment_tracker(in_commitment, in_commitment_bliding);\n\n//     // output commitment generation\n//     let receiver_account = account(100);\n//     let out_sender_commitment_bliding = 3;\n//     let out_receiver_commitment_bliding = 3;\n//     let out_receiver_commitment =\n//         commitment(receiver_account, out_receiver_commitment_value, out_receiver_commitment_bliding);\n//     let out_sender_commitment = commitment(sender_account, out_sender_commitment_value, out_sender_commitment_bliding);\n\n//     // old tree\n//     let old_first_level_l = hash([in_commitment, 1], 2);\n//     let old_first_level_r = hash([0, 0], 2);\n//     let in_commitment_root = hash([old_first_level_l, old_first_level_r], 2);\n\n//     // new tree\n//     let new_first_level_l = hash([in_commitment, 1], 2);\n//     let new_first_level_r = hash([out_sender_commitment, out_receiver_commitment], 2);\n//     let out_root = hash([new_first_level_l, new_first_level_r], 2);\n\n//     // nullifier\n//     let in_commitment_path = [1, old_first_level_r];\n//     let in_commitment_direction_selector = [false, false];\n\n//     main(\n//         sender_private_key,\n//         receiver_account,\n//         in_commitment_root,\n//         in_commitment_path,\n//         in_commitment_direction_selector,\n//         in_commitment_value,\n//         in_commitment_bliding,\n//         in_commitment_spending_tracker,\n//         out_receiver_commitment_value,\n//         out_receiver_commitment_bliding,\n//         out_receiver_commitment,\n//         out_sender_commitment_value,\n//         out_sender_commitment_bliding,\n//         out_sender_commitment,\n//         out_root,\n//         [new_first_level_l],\n//         [true],\n//     );\n// }\n\n// #[test(should_fail)]\n// fn test_unlinked_root() {\n//     // generate amounts\n//     let in_commitment_value = 10;\n//     let out_receiver_commitment_value = 2;\n//     let out_sender_commitment_value = 8000; // Notice here\n\n//     // account details\n//     let sender_private_key = 1;\n//     let sender_account = account(sender_private_key);\n\n//     // generate commitment\n//     let in_commitment_bliding = 2;\n//     let in_commitment = commitment(sender_account, in_commitment_value, in_commitment_bliding);\n//     let in_commitment_spending_tracker = commitment_tracker(in_commitment, in_commitment_bliding);\n\n//     // output commitment generation\n//     let receiver_account = account(100);\n//     let out_sender_commitment_bliding = 3;\n//     let out_receiver_commitment_bliding = 3;\n//     let out_receiver_commitment =\n//         commitment(receiver_account, out_receiver_commitment_value, out_receiver_commitment_bliding);\n//     let out_sender_commitment = commitment(sender_account, out_sender_commitment_value, out_sender_commitment_bliding);\n\n//     // old tree\n//     let old_first_level_l = hash([in_commitment, 1], 2);\n//     let old_first_level_r = hash([0, 0], 2);\n//     let in_commitment_root = hash([old_first_level_l, old_first_level_r], 2);\n\n//     // new tree\n//     let new_first_level_l = hash([100000, 1], 2); // <-------------------------------------------- Removed in commitment\n//     let new_first_level_r = hash([out_sender_commitment, out_receiver_commitment], 2);\n//     let out_root = hash([new_first_level_l, new_first_level_r], 2);\n\n//     // nullifier\n//     let in_commitment_path = [1, old_first_level_r];\n//     let in_commitment_direction_selector = [false, false];\n\n//     main(\n//         sender_private_key,\n//         receiver_account,\n//         in_commitment_root,\n//         in_commitment_path,\n//         in_commitment_direction_selector,\n//         in_commitment_value,\n//         in_commitment_bliding,\n//         in_commitment_spending_tracker,\n//         out_receiver_commitment_value,\n//         out_receiver_commitment_bliding,\n//         out_receiver_commitment,\n//         out_sender_commitment_value,\n//         out_sender_commitment_bliding,\n//         out_sender_commitment,\n//         out_root,\n//         [new_first_level_l],\n//         [true],\n//     );\n// }\n\n// #[test(should_fail)]\n// fn test_missing_new_commits() {\n//     // generate amounts\n//     let in_commitment_value = 10;\n//     let out_receiver_commitment_value = 2;\n//     let out_sender_commitment_value = 8000; // Notice here\n\n//     // account details\n//     let sender_private_key = 1;\n//     let sender_account = account(sender_private_key);\n\n//     // generate commitment\n//     let in_commitment_bliding = 2;\n//     let in_commitment = commitment(sender_account, in_commitment_value, in_commitment_bliding);\n//     let in_commitment_spending_tracker = commitment_tracker(in_commitment, in_commitment_bliding);\n\n//     // output commitment generation\n//     let receiver_account = account(100);\n//     let out_sender_commitment_bliding = 3;\n//     let out_receiver_commitment_bliding = 3;\n//     let out_receiver_commitment =\n//         commitment(receiver_account, out_receiver_commitment_value, out_receiver_commitment_bliding);\n//     let out_sender_commitment = commitment(sender_account, out_sender_commitment_value, out_sender_commitment_bliding);\n\n//     // old tree\n//     let old_first_level_l = hash([in_commitment, 1], 2);\n//     let old_first_level_r = hash([0, 0], 2);\n//     let in_commitment_root = hash([old_first_level_l, old_first_level_r], 2);\n\n//     // new tree\n//     let new_first_level_l = hash([in_commitment, 1], 2);\n//     let new_first_level_r = hash([0, 0], 2); // <-------------------------------------------- Missing new commitments\n//     let out_root = hash([new_first_level_l, new_first_level_r], 2);\n\n//     // nullifier\n//     let in_commitment_path = [1, old_first_level_r];\n//     let in_commitment_direction_selector = [false, false];\n\n//     main(\n//         sender_private_key,\n//         receiver_account,\n//         in_commitment_root,\n//         in_commitment_path,\n//         in_commitment_direction_selector,\n//         in_commitment_value,\n//         in_commitment_bliding,\n//         in_commitment_spending_tracker,\n//         out_receiver_commitment_value,\n//         out_receiver_commitment_bliding,\n//         out_receiver_commitment,\n//         out_sender_commitment_value,\n//         out_sender_commitment_bliding,\n//         out_sender_commitment,\n//         out_root,\n//         [new_first_level_l],\n//         [true],\n//     );\n// }\n","path":"/Users/matzapata/git-work/starkware/starkware-private-erc20/packages/circuits/transfer/src/main.nr"},"64":{"source":"use std::hash::poseidon2::Poseidon2::hash;\n\n// account = hash(private_key) \npub fn account(private_key: Field) -> Field {\n    hash([private_key], 1)\n}\n\n// commitment = hash(owner, bliding, amount) // bliding = random number that makes commitment unique\npub fn commitment(owner: Field, value: Field, bliding: Field) -> Field {\n    hash([owner, value, bliding], 3)\n}\n\n// commitment_tracker = hash(commitment, bliding) // same bliding as for commitment\npub fn commitment_tracker(commitment: Field, bliding: Field) -> Field {\n    hash([commitment, bliding], 3)\n}\n\n// allowance_hash = hash(owner, spender, value)\npub fn allowance_hash(owner: Field, spender: Field, value: Field) -> Field {\n    hash([owner, spender, value], 3)\n}\n\n// allowance_relationship = hash(owner, spender)\npub fn allowance_relationship(owner: Field, spender: Field) -> Field {\n    hash([owner, spender], 2)\n}\n","path":"/Users/matzapata/git-work/starkware/starkware-private-erc20/packages/circuits/common/src/definitions.nr"},"65":{"source":"use std::hash::poseidon2::Poseidon2::hash;\n\npub fn assert_merkle_inclusion<let N: u32>(\n    root: Field,\n    path: [Field],\n    direction_selector: [bool],\n    leaf: Field,\n    failure_message: str<N>\n) {\n    assert(path.len() == direction_selector.len());\n    \n    let mut digest = leaf;\n    for i in 0..path.len() {\n        let (left, right) = if direction_selector[i] {\n            (path[i], digest)\n        } else {\n            (digest, path[i])\n        };\n\n        digest = hash([left, right], 2);\n    }\n\n    assert(digest == root, failure_message);\n}\n\npub fn find_leaf_index(direction_selector: [bool]) -> Field {\n    let mut index: u32 = 0;\n    let depth = direction_selector.len();\n\n    for i in 0..depth {\n        let pos = depth - 1 - i;\n        index = index * 2;\n        if direction_selector[pos] {\n            index = index + 1;\n        }\n    }\n    index as Field\n}\n\n// assert merkle inclusion tests\n\n#[test]\nfn should_be_included() {\n    let first_level_l = hash([hash([1], 1), hash([0], 1)], 2);\n    let first_level_r = hash([hash([0], 1), hash([0], 1)], 2);\n    let root = hash([first_level_l, first_level_r], 2);\n\n    let path: [Field; 2] = [ hash([0], 1), first_level_r ];\n    let direction_selector: [bool; 2] = [ false, false ];\n\n    assert_merkle_inclusion(root, path, direction_selector, hash([1], 1), \"Failed\");\n}\n\n\n#[test(should_fail_with=\"Failed\")]\nfn should_not_included() {\n    let first_level_l = hash([hash([1], 1), hash([0], 1)], 2);\n    let first_level_r = hash([hash([0], 1), hash([0], 1)], 2);\n    let root = hash([first_level_l, first_level_r], 2);\n\n    let path: [Field; 2] = [ hash([0], 1), first_level_r ];\n    let direction_selector: [bool; 2] = [ false, false ];\n\n    assert_merkle_inclusion(root, path, direction_selector, hash([100], 1), \"Failed\");\n}\n\n// generate index tests\n\n#[test]\nfn test_generate_index_case1() {\n    let directions: [bool; 2] = [true, false];\n    let index = find_leaf_index(directions);\n    assert(index == 1);\n}\n\n#[test]\nfn test_generate_index_case2() {\n    let directions: [bool; 2] = [false, true];\n    let index = find_leaf_index(directions);\n    assert(index == 2);\n}","path":"/Users/matzapata/git-work/starkware/starkware-private-erc20/packages/circuits/common/src/merkle_tree.nr"}},"names":["main"],"brillig_names":[]}
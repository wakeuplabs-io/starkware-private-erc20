{"noir_version":"1.0.0-beta.1+03b58fa2dfcc8acc8cf5198b1b23b55676fbdb02","hash":8959103993410638810,"abi":{"parameters":[{"name":"sender_private_key","type":{"kind":"field"},"visibility":"private"},{"name":"receiver_account","type":{"kind":"field"},"visibility":"private"},{"name":"in_commitment_root","type":{"kind":"field"},"visibility":"public"},{"name":"in_commitment_path","type":{"kind":"array","length":12,"type":{"kind":"field"}},"visibility":"private"},{"name":"in_commitment_direction_selector","type":{"kind":"array","length":12,"type":{"kind":"boolean"}},"visibility":"private"},{"name":"in_commitment_value","type":{"kind":"field"},"visibility":"private"},{"name":"in_commitment_bliding","type":{"kind":"field"},"visibility":"private"},{"name":"in_commitment_nullifier_hash","type":{"kind":"field"},"visibility":"public"},{"name":"out_receiver_commitment_value","type":{"kind":"field"},"visibility":"private"},{"name":"out_receiver_commitment_bliding","type":{"kind":"field"},"visibility":"private"},{"name":"out_receiver_commitment","type":{"kind":"field"},"visibility":"public"},{"name":"out_sender_commitment_value","type":{"kind":"field"},"visibility":"private"},{"name":"out_sender_commitment_bliding","type":{"kind":"field"},"visibility":"private"},{"name":"out_sender_commitment","type":{"kind":"field"},"visibility":"public"},{"name":"out_root","type":{"kind":"field"},"visibility":"public"},{"name":"out_subtree_root_path","type":{"kind":"array","length":11,"type":{"kind":"field"}},"visibility":"private"},{"name":"out_subtree_root_direction_selector","type":{"kind":"array","length":11,"type":{"kind":"boolean"}},"visibility":"private"}],"return_type":null,"error_types":{"624257843267711912":{"error_kind":"string","string":"New commits not included in new root"},"1766617166191739668":{"error_kind":"string","string":"Invalid UTXO amounts"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"11889370444656604730":{"error_kind":"string","string":"Invalid out receiver commitment"},"14188306708689744993":{"error_kind":"string","string":"Input commitment doesn't belong to tree"},"15449175181940140965":{"error_kind":"string","string":"Invalid out sender commitment"},"16860811455173349640":{"error_kind":"string","string":"Missing commitments from old tree in new tree"},"18095542800421564380":{"error_kind":"string","string":"Nullifier hash doesn't match"}}},"bytecode":"","debug_symbols":"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","file_map":{"26":{"source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"62":{"source":"use common::definitions::{account, commitment, nullifier};\nuse common::merkle_tree::{assert_merkle_inclusion, find_leaf_index};\nuse std::hash::poseidon2::Poseidon2::hash;\n\n// TODO: update before deploying. So far haven't found way to override for testing\nglobal DEPTH: u32 = 12;\n\npub fn main(\n    // accounts details\n    sender_private_key: Field,\n    receiver_account: Field,\n    // utxo inputs\n    in_commitment_root: pub Field,\n    in_commitment_path: [Field; DEPTH],\n    in_commitment_direction_selector: [bool; DEPTH],\n    in_commitment_value: Field,\n    in_commitment_bliding: Field,\n    in_commitment_nullifier_hash: pub Field,\n    // utxo outputs\n    out_receiver_commitment_value: Field,\n    out_receiver_commitment_bliding: Field,\n    out_receiver_commitment: pub Field,\n    out_sender_commitment_value: Field,\n    out_sender_commitment_bliding: Field,\n    out_sender_commitment: pub Field,\n    // updated root\n    out_root: pub Field,\n    out_subtree_root_path: [Field; DEPTH - 1], // path of hash(out_sender_commitment, out_receiver_commitment)\n    out_subtree_root_direction_selector: [bool; DEPTH - 1], // path direction of hash(out_sender_commitment, out_receiver_commitment)\n) {\n    // check in_commitment is included in the root and belongs to sender\n    let sender_account = account(sender_private_key);\n    let in_commitment = commitment(sender_account, in_commitment_value, in_commitment_bliding);\n    assert_merkle_inclusion(\n        in_commitment_root,\n        in_commitment_path,\n        in_commitment_direction_selector,\n        in_commitment,\n        \"Input commitment doesn't belong to tree\",\n    );\n\n    // check nullifier_hash belongs to nullifier, tied with previous check nullifier derives in commitment\n    let in_commitment_index = find_leaf_index(in_commitment_direction_selector);\n    assert_eq(\n        hash(\n            [nullifier(in_commitment, sender_private_key, in_commitment_index)],\n            1,\n        ),\n        in_commitment_nullifier_hash,\n        \"Nullifier hash doesn't match\",\n    );\n\n    // check utxo\n    assert_eq(\n        in_commitment_value,\n        out_receiver_commitment_value + out_sender_commitment_value,\n        \"Invalid UTXO amounts\",\n    );\n\n    // validate commitment amounts and receivers are correct\n    assert_eq(\n        commitment(\n            sender_account,\n            out_sender_commitment_value,\n            out_sender_commitment_bliding,\n        ),\n        out_sender_commitment,\n        \"Invalid out sender commitment\",\n    );\n    assert_eq(\n        commitment(\n            receiver_account,\n            out_receiver_commitment_value,\n            out_receiver_commitment_bliding,\n        ),\n        out_receiver_commitment,\n        \"Invalid out receiver commitment\",\n    );\n\n    // check we're inserting in a previously empty subtree\n    let zero_subtree_root = hash([0, 0], 2);\n    assert_merkle_inclusion(\n        in_commitment_root,\n        out_subtree_root_path,\n        out_subtree_root_direction_selector,\n        zero_subtree_root,\n        \"Missing commitments from old tree in new tree\",\n    );\n\n    // check newly inserted commitments belong to out_root\n    let new_subtree_root = hash([out_sender_commitment, out_receiver_commitment], 2);\n    assert_merkle_inclusion(\n        out_root,\n        out_subtree_root_path,\n        out_subtree_root_direction_selector,\n        new_subtree_root,\n        \"New commits not included in new root\",\n    );\n}\n\n// #[test]\n// fn test_allowed_transfer() {\n//     // generate amounts\n//     let in_commitment_value = 10;\n//     let out_receiver_commitment_value = 2;\n//     let out_sender_commitment_value = 8;\n\n//     // account details\n//     let sender_private_key = 1;\n//     let sender_account = account(sender_private_key);\n\n//     // generate commitment\n//     let in_commitment_bliding = 2;\n//     let in_commitment = commitment(sender_account, in_commitment_value, in_commitment_bliding);\n//     let in_commitment_index = 0;\n\n//     // output commitment generation\n//     let receiver_account = account(100);\n//     let out_sender_commitment_bliding = 3;\n//     let out_receiver_commitment_bliding = 3;\n//     let out_receiver_commitment = commitment(\n//         receiver_account,\n//         out_receiver_commitment_value,\n//         out_receiver_commitment_bliding,\n//     );\n//     let out_sender_commitment = commitment(\n//         sender_account,\n//         out_sender_commitment_value,\n//         out_sender_commitment_bliding,\n//     );\n\n//     // old tree\n//     let old_first_level_l = hash([in_commitment, 1], 2);\n//     let old_first_level_r = hash([0, 0], 2);\n//     let in_commitment_root = hash([old_first_level_l, old_first_level_r], 2);\n\n//     // new tree\n//     let new_first_level_l = hash([in_commitment, 1], 2);\n//     let new_first_level_r = hash([out_sender_commitment, out_receiver_commitment], 2);\n//     let out_root = hash([new_first_level_l, new_first_level_r], 2);\n\n//     // nullifier\n//     let in_commitment_path = [1, old_first_level_r];\n//     let in_commitment_direction_selector = [false, false];\n//     let in_commitment_nullifier = nullifier(in_commitment, sender_private_key, in_commitment_index);\n//     let in_commitment_nullifier_hash = hash([in_commitment_nullifier], 1);\n\n//     main(\n//         sender_private_key,\n//         receiver_account,\n//         in_commitment_root,\n//         in_commitment_path,\n//         in_commitment_direction_selector,\n//         in_commitment_value,\n//         in_commitment_bliding,\n//         in_commitment_nullifier_hash,\n//         out_receiver_commitment_value,\n//         out_receiver_commitment_bliding,\n//         out_receiver_commitment,\n//         out_sender_commitment_value,\n//         out_sender_commitment_bliding,\n//         out_sender_commitment,\n//         out_root,\n//         [new_first_level_l],\n//         [true],\n//     );\n// }\n\n// #[test(should_fail_with = \"Invalid UTXO amounts\")]\n// fn test_invalid_utxo_amounts() {\n//     // generate amounts\n//     let in_commitment_value = 10;\n//     let out_receiver_commitment_value = 2;\n//     let out_sender_commitment_value = 8000; // // <-------------------------------------------- out more than it should\n\n//     // account details\n//     let sender_private_key = 1;\n//     let sender_account = account(sender_private_key);\n\n//     // generate commitment\n//     let in_commitment_bliding = 2;\n//     let in_commitment = commitment(sender_account, in_commitment_value, in_commitment_bliding);\n//     let in_commitment_index = 0;\n\n//     // output commitment generation\n//     let receiver_account = account(100);\n//     let out_sender_commitment_bliding = 3;\n//     let out_receiver_commitment_bliding = 3;\n//     let out_receiver_commitment = commitment(\n//         receiver_account,\n//         out_receiver_commitment_value,\n//         out_receiver_commitment_bliding,\n//     );\n//     let out_sender_commitment = commitment(\n//         sender_account,\n//         out_sender_commitment_value,\n//         out_sender_commitment_bliding,\n//     );\n\n//     // old tree\n//     let old_first_level_l = hash([in_commitment, 1], 2);\n//     let old_first_level_r = hash([0, 0], 2);\n//     let in_commitment_root = hash([old_first_level_l, old_first_level_r], 2);\n\n//     // new tree\n//     let new_first_level_l = hash([in_commitment, 1], 2);\n//     let new_first_level_r = hash([out_sender_commitment, out_receiver_commitment], 2);\n//     let out_root = hash([new_first_level_l, new_first_level_r], 2);\n\n//     // nullifier\n//     let in_commitment_path = [1, old_first_level_r];\n//     let in_commitment_direction_selector = [false, false];\n//     let in_commitment_nullifier = nullifier(in_commitment, sender_private_key, in_commitment_index);\n//     let in_commitment_nullifier_hash = hash([in_commitment_nullifier], 1);\n\n//     main(\n//         sender_private_key,\n//         receiver_account,\n//         in_commitment_root,\n//         in_commitment_path,\n//         in_commitment_direction_selector,\n//         in_commitment_value,\n//         in_commitment_bliding,\n//         in_commitment_nullifier_hash,\n//         out_receiver_commitment_value,\n//         out_receiver_commitment_bliding,\n//         out_receiver_commitment,\n//         out_sender_commitment_value,\n//         out_sender_commitment_bliding,\n//         out_sender_commitment,\n//         out_root,\n//         [new_first_level_l],\n//         [true],\n//     );\n// }\n\n// #[test(should_fail)]\n// fn test_unlinked_root() {\n//     // generate amounts\n//     let in_commitment_value = 10;\n//     let out_receiver_commitment_value = 2;\n//     let out_sender_commitment_value = 8000; // Notice here\n\n//     // account details\n//     let sender_private_key = 1;\n//     let sender_account = account(sender_private_key);\n\n//     // generate commitment\n//     let in_commitment_bliding = 2;\n//     let in_commitment = commitment(sender_account, in_commitment_value, in_commitment_bliding);\n//     let in_commitment_index = 0;\n\n//     // output commitment generation\n//     let receiver_account = account(100);\n//     let out_sender_commitment_bliding = 3;\n//     let out_receiver_commitment_bliding = 3;\n//     let out_receiver_commitment = commitment(\n//         receiver_account,\n//         out_receiver_commitment_value,\n//         out_receiver_commitment_bliding,\n//     );\n//     let out_sender_commitment = commitment(\n//         sender_account,\n//         out_sender_commitment_value,\n//         out_sender_commitment_bliding,\n//     );\n\n//     // old tree\n//     let old_first_level_l = hash([in_commitment, 1], 2);\n//     let old_first_level_r = hash([0, 0], 2);\n//     let in_commitment_root = hash([old_first_level_l, old_first_level_r], 2);\n\n//     // new tree\n//     let new_first_level_l = hash([100000, 1], 2); // <-------------------------------------------- Removed in commitment\n//     let new_first_level_r = hash([out_sender_commitment, out_receiver_commitment], 2);\n//     let out_root = hash([new_first_level_l, new_first_level_r], 2);\n\n//     // nullifier\n//     let in_commitment_path = [1, old_first_level_r];\n//     let in_commitment_direction_selector = [false, false];\n//     let in_commitment_nullifier = nullifier(in_commitment, sender_private_key, in_commitment_index);\n//     let in_commitment_nullifier_hash = hash([in_commitment_nullifier], 1);\n\n//     main(\n//         sender_private_key,\n//         receiver_account,\n//         in_commitment_root,\n//         in_commitment_path,\n//         in_commitment_direction_selector,\n//         in_commitment_value,\n//         in_commitment_bliding,\n//         in_commitment_nullifier_hash,\n//         out_receiver_commitment_value,\n//         out_receiver_commitment_bliding,\n//         out_receiver_commitment,\n//         out_sender_commitment_value,\n//         out_sender_commitment_bliding,\n//         out_sender_commitment,\n//         out_root,\n//         [new_first_level_l],\n//         [true],\n//     );\n// }\n\n// #[test(should_fail)]\n// fn test_missing_new_commits() {\n//     // generate amounts\n//     let in_commitment_value = 10;\n//     let out_receiver_commitment_value = 2;\n//     let out_sender_commitment_value = 8000; // Notice here\n\n//     // account details\n//     let sender_private_key = 1;\n//     let sender_account = account(sender_private_key);\n\n//     // generate commitment\n//     let in_commitment_bliding = 2;\n//     let in_commitment = commitment(sender_account, in_commitment_value, in_commitment_bliding);\n//     let in_commitment_index = 0;\n\n//     // output commitment generation\n//     let receiver_account = account(100);\n//     let out_sender_commitment_bliding = 3;\n//     let out_receiver_commitment_bliding = 3;\n//     let out_receiver_commitment = commitment(\n//         receiver_account,\n//         out_receiver_commitment_value,\n//         out_receiver_commitment_bliding,\n//     );\n//     let out_sender_commitment = commitment(\n//         sender_account,\n//         out_sender_commitment_value,\n//         out_sender_commitment_bliding,\n//     );\n\n//     // old tree\n//     let old_first_level_l = hash([in_commitment, 1], 2);\n//     let old_first_level_r = hash([0, 0], 2);\n//     let in_commitment_root = hash([old_first_level_l, old_first_level_r], 2);\n\n//     // new tree\n//     let new_first_level_l = hash([in_commitment, 1], 2);\n//     let new_first_level_r = hash([0, 0], 2); // <-------------------------------------------- Missing new commitments\n//     let out_root = hash([new_first_level_l, new_first_level_r], 2);\n\n//     // nullifier\n//     let in_commitment_path = [1, old_first_level_r];\n//     let in_commitment_direction_selector = [false, false];\n//     let in_commitment_nullifier = nullifier(in_commitment, sender_private_key, in_commitment_index);\n//     let in_commitment_nullifier_hash = hash([in_commitment_nullifier], 1);\n\n//     main(\n//         sender_private_key,\n//         receiver_account,\n//         in_commitment_root,\n//         in_commitment_path,\n//         in_commitment_direction_selector,\n//         in_commitment_value,\n//         in_commitment_bliding,\n//         in_commitment_nullifier_hash,\n//         out_receiver_commitment_value,\n//         out_receiver_commitment_bliding,\n//         out_receiver_commitment,\n//         out_sender_commitment_value,\n//         out_sender_commitment_bliding,\n//         out_sender_commitment,\n//         out_root,\n//         [new_first_level_l],\n//         [true],\n//     );\n// }\n","path":"/Users/matzapata/git-work/starkware/starkware-private-erc20/packages/circuits/transfer/src/main.nr"},"64":{"source":"use std::hash::poseidon2::Poseidon2::hash;\n\n// account = hash(private_key) \npub fn account(private_key: Field) -> Field {\n    hash([private_key], 1)\n}\n\n// commitment = hash(owner, bliding, amount) // bliding = random number that makes commitment unique\npub fn commitment(owner: Field, value: Field, bliding: Field) -> Field {\n    hash([owner, value, bliding], 3)\n}\n\n// nullifier = hash(commitment, private_key, leaf_index)\npub fn nullifier(\n    commitment: Field,\n    private_key: Field,\n    index: Field,\n) -> Field {\n    hash([commitment, private_key, index], 3)\n}\n","path":"/Users/matzapata/git-work/starkware/starkware-private-erc20/packages/circuits/common/src/definitions.nr"},"65":{"source":"use std::hash::poseidon2::Poseidon2::hash;\n\npub fn assert_merkle_inclusion<let N: u32>(\n    root: Field,\n    path: [Field],\n    direction_selector: [bool],\n    leaf: Field,\n    failure_message: str<N>\n) {\n    assert(path.len() == direction_selector.len());\n    \n    let mut digest = leaf;\n    for i in 0..path.len() {\n        let (left, right) = if direction_selector[i] {\n            (path[i], digest)\n        } else {\n            (digest, path[i])\n        };\n\n        digest = hash([left, right], 2);\n    }\n\n    assert(digest == root, failure_message);\n}\n\npub fn find_leaf_index(direction_selector: [bool]) -> Field {\n    let mut index: u32 = 0;\n    let depth = direction_selector.len();\n\n    for i in 0..depth {\n        let pos = depth - 1 - i;\n        index = index * 2;\n        if direction_selector[pos] {\n            index = index + 1;\n        }\n    }\n    index as Field\n}\n\n// assert merkle inclusion tests\n\n#[test]\nfn should_be_included() {\n    let first_level_l = hash([hash([1], 1), hash([0], 1)], 2);\n    let first_level_r = hash([hash([0], 1), hash([0], 1)], 2);\n    let root = hash([first_level_l, first_level_r], 2);\n\n    let path: [Field; 2] = [ hash([0], 1), first_level_r ];\n    let direction_selector: [bool; 2] = [ false, false ];\n\n    assert_merkle_inclusion(root, path, direction_selector, hash([1], 1), \"Failed\");\n}\n\n\n#[test(should_fail_with=\"Failed\")]\nfn should_not_included() {\n    let first_level_l = hash([hash([1], 1), hash([0], 1)], 2);\n    let first_level_r = hash([hash([0], 1), hash([0], 1)], 2);\n    let root = hash([first_level_l, first_level_r], 2);\n\n    let path: [Field; 2] = [ hash([0], 1), first_level_r ];\n    let direction_selector: [bool; 2] = [ false, false ];\n\n    assert_merkle_inclusion(root, path, direction_selector, hash([100], 1), \"Failed\");\n}\n\n// generate index tests\n\n#[test]\nfn test_generate_index_case1() {\n    let directions: [bool; 2] = [true, false];\n    let index = find_leaf_index(directions);\n    assert(index == 1);\n}\n\n#[test]\nfn test_generate_index_case2() {\n    let directions: [bool; 2] = [false, true];\n    let index = find_leaf_index(directions);\n    assert(index == 2);\n}","path":"/Users/matzapata/git-work/starkware/starkware-private-erc20/packages/circuits/common/src/merkle_tree.nr"}},"names":["main"],"brillig_names":[]}
{"noir_version":"1.0.0-beta.1+03b58fa2dfcc8acc8cf5198b1b23b55676fbdb02","hash":4500959615172954697,"abi":{"parameters":[{"name":"sender_private_key","type":{"kind":"field"},"visibility":"private"},{"name":"receiver_account","type":{"kind":"field"},"visibility":"private"},{"name":"in_commitment_root","type":{"kind":"field"},"visibility":"public"},{"name":"in_commitment_path","type":{"kind":"array","length":12,"type":{"kind":"field"}},"visibility":"private"},{"name":"in_commitment_direction_selector","type":{"kind":"array","length":12,"type":{"kind":"boolean"}},"visibility":"private"},{"name":"in_commitment_value","type":{"kind":"field"},"visibility":"private"},{"name":"in_commitment_bliding","type":{"kind":"field"},"visibility":"private"},{"name":"in_commitment_spending_tracker","type":{"kind":"field"},"visibility":"public"},{"name":"out_receiver_commitment_value","type":{"kind":"field"},"visibility":"private"},{"name":"out_receiver_commitment_bliding","type":{"kind":"field"},"visibility":"private"},{"name":"out_receiver_commitment","type":{"kind":"field"},"visibility":"public"},{"name":"out_sender_commitment_value","type":{"kind":"field"},"visibility":"private"},{"name":"out_sender_commitment_bliding","type":{"kind":"field"},"visibility":"private"},{"name":"out_sender_commitment","type":{"kind":"field"},"visibility":"public"},{"name":"out_root","type":{"kind":"field"},"visibility":"public"},{"name":"out_subtree_root_path","type":{"kind":"array","length":11,"type":{"kind":"field"}},"visibility":"private"},{"name":"out_subtree_root_direction_selector","type":{"kind":"array","length":11,"type":{"kind":"boolean"}},"visibility":"private"}],"return_type":null,"error_types":{"624257843267711912":{"error_kind":"string","string":"New commits not included in new root"},"1766617166191739668":{"error_kind":"string","string":"Invalid UTXO amounts"},"11889370444656604730":{"error_kind":"string","string":"Invalid out receiver commitment"},"12827564540088390524":{"error_kind":"string","string":"Invalid commitment tracker"},"14188306708689744993":{"error_kind":"string","string":"Input commitment doesn't belong to tree"},"15449175181940140965":{"error_kind":"string","string":"Invalid out sender commitment"},"16860811455173349640":{"error_kind":"string","string":"Missing commitments from old tree in new tree"}}},"bytecode":"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","debug_symbols":"7Z3bTmM5EEX/Jc882OU7vzIatbi2IqEEcRlphPj3CXSfdLJzSJTC9eLZjwFXSVmUatVJbPO2uL27fv35Y7m6Xz8vLv96Wzysb65eluvV5tXbQsrnz54fr1YfL59frp5eFpch5YvF3ep2cRnFvV8s7pcPd4tLye8XB0ulyLRWSjyx2Jcafi/21cmJxW6b2buSTiyWWqbFwcft4iyzi7eJY/2zNL7/fbGQSiD7QBqB7AEJbhAgIbrtm/TuOJAQprUhCwLxBLIPROaA+Fi2BRhb2k3/ERMUMVERkxQxWRFTFDFVEdPOj4lOEeMVMYo6iIo6iIo6iIo6iIo6iIo6iIo6iIo6SIo6SIo6SIo6SIo6SIo6SIo6SPN1kFyaYlIoGFMUMVUR086PyU4R4xUxoogJipioiEmKGEUdZEUdZEUd5C/6gd/OA9nXE4qPbVJ82ZkG0kf64r6fvk5rQwuY3n87fYx+mr92R9hf6WWQie0sIGX6cybnEUggkH0gkUD2gSQC2QeSCWQfSLE1TrU1TjM1TnW26Uf5CKJXMVYaHoDQ8AAkEsg+kGTav2s27d+12Kavtv3b1j5tlI/se9V6oy8BCH0JQOhLABJN9dCSaf9utvZpxbZ/29qnjfIVd69a947CRCI0JhKhMpFIMFWEd9G0iXuXjPNn0za++VMb5x9lb1i/iqc5gYinOZEIzYlExNYTPtj2cW/sIZ9s+7g39pAfZVN1v4qnOZEIzQlEhOZEIt7WEyK2fVyMPSTRto+LsYeEWyiQCM2JRGhOJEJzApHgbD0RvG0fD8YeCsG2jwdjDwXuPUQiNCcSoTmRCM2JRGzPRPhoeyjCR2MPRbHt49HYQ/PnAP/PFR9pTiRCcyIRmhOJVGNPNNs+now9lGxP5/lk7KHEvX1IhOZEIjQnEqE5kYjtiTefqnEfN/ZQtj305rOxhzJ3+CERmhOJ0JxIhOZEItnWE7kY93FjD2Xb02++GHuocIcfEqE5kQjNiURoTiTy/f02SaY+lUI6yD/KE1zO28VF5BSRaW1K+c/S+IvIvDlziF/k/wya12Fp2yvjak0HQYPs2hDnpwoT18oJ6x+5JNTPX4mym99LRYyjXHQi4qbMIvsXDJ6LcVa1u/nDDMZZG0lKU91LKgclPH9jxqmgpAnKmqCiCaqaoKYImr+D4VSQ1wSJJkhTEU1TEe2LiqjTbYaSxR0EZU1Q0QRVTVA7P0ic0wR5TZBogoImKGqCkiYoa4LmKyK2bbMs3uufxGX+hOR5+Y88Kcv8ecOz8h97kpVRTu+dR+TITC6jnN7rSGSQZ/uORIJtV5k/b9ivq8yfN+zYVbJx/kF2sHSsyEH2fnYkMsrzdzcio5w37EiErkcidD0SMXa9GLteknF+Y9dLMc5PcyIRmhOIjPIf0DoSoTmRCM2JRAb5BrwjkWg7SwRj14dsnN/Y9aEa56c5gUikOZEIzYlEaE4kQnMikUgiQCTZzhLR2PWxGOc3dn00/mY20ZxIhOZEIjQnEqE5kQjNiUQGOa/UkUi2nSWSseuT8S6sZOz6+XOzHfPTnEiE5kQiNCcSoTmRCM2JRAY5YdWRiPGO62zs+txs8xdj18+fTe6Yn+ZEIjQnEqE5kQjNiURoTiTCXe1IpNrOEsXY9dUZ5zd2/RdHjfvlpzmRCM2JRGhOJEJzIhGaE4lwVzsSabazRDN2ffPG+Y1d34JxfpoTidCcSITmRCI0JxKhOZEId7XvEwnOmc4Swdm6Pjgxzm/r+uCicX6aE4nQnEiE5kQiNCcSoTmBCO8bOyDibWcJb+z6HndhHc0fbV1vfBdW8DQnEqE5kQjNiURoTiDC27sOiHBXOxL5vuuP/T+BIKN8X1/ddMH65vvlvTvtP99mHOVt5inz5gH+W4U1ygci/YiMMtb1IzLKWNePyChjXT8io4x13YgMc7VcPyKjjHX9iIxy5KIfkWEG0W5EIokAEc6sSIQzKxLhzIpEOLMiEc6sQGSYSx37EeHMikQ4syIRzqxIJJIIEOHMikQ4syIRzqxIhDMrEuHMCkSGuU61HxHOrEiEMysS4cyKRCKJABHOrEiEMysS4cyKRDizIhHOrEAkc2ZFIpxZkQhnViTCmRWJRBIBIpxZkQhnViTCmRWJzF/HeE7+r48XbF5cPy0fHpY/fzysb65eluvV8yZw8+N/rp6WV9cPd79f3r+ubnZ++/Lv4/SbKf7xaX1zd/v6dPeR6fN3m/T/AQ==","file_map":{"26":{"source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"62":{"source":"use common::definitions::{account, commitment, commitment_tracker};\nuse common::merkle_tree::{assert_merkle_inclusion};\nuse std::hash::poseidon2::Poseidon2::hash;\n\n// TODO: update before deploying. So far haven't found way to override for testing\nglobal DEPTH: u32 = 12;\n\npub fn main(\n    // accounts details\n    sender_private_key: Field,\n    receiver_account: Field,\n    // utxo inputs\n    in_commitment_root: pub Field,\n    in_commitment_path: [Field; DEPTH],\n    in_commitment_direction_selector: [bool; DEPTH],\n    in_commitment_value: Field,\n    in_commitment_bliding: Field,\n    in_commitment_spending_tracker: pub Field,\n    // utxo outputs\n    out_receiver_commitment_value: Field,\n    out_receiver_commitment_bliding: Field,\n    out_receiver_commitment: pub Field,\n    out_sender_commitment_value: Field,\n    out_sender_commitment_bliding: Field,\n    out_sender_commitment: pub Field,\n    // updated root\n    out_root: pub Field,\n    out_subtree_root_path: [Field; DEPTH - 1], // path of hash(out_sender_commitment, out_receiver_commitment)\n    out_subtree_root_direction_selector: [bool; DEPTH - 1], // path direction of hash(out_sender_commitment, out_receiver_commitment)\n) {\n    // check in_commitment is included in the root and belongs to sender\n    let sender_account = account(sender_private_key);\n    let in_commitment = commitment(sender_account, in_commitment_value, in_commitment_bliding);\n    assert_merkle_inclusion(\n        in_commitment_root,\n        in_commitment_path,\n        in_commitment_direction_selector,\n        in_commitment,\n        \"Input commitment doesn't belong to tree\",\n    );\n    assert_eq(in_commitment_spending_tracker, commitment_tracker(in_commitment, in_commitment_bliding), \"Invalid commitment tracker\");\n\n    // check utxo\n    assert_eq(\n        in_commitment_value,\n        out_receiver_commitment_value + out_sender_commitment_value,\n        \"Invalid UTXO amounts\",\n    );\n\n    // validate commitment amounts and receivers are correct\n    assert_eq(\n        commitment(sender_account, out_sender_commitment_value, out_sender_commitment_bliding),\n        out_sender_commitment,\n          \"Invalid out sender commitment\",\n    );\n    assert_eq(\n        commitment(receiver_account, out_receiver_commitment_value, out_receiver_commitment_bliding),\n        out_receiver_commitment,\n            \"Invalid out receiver commitment\",\n    );\n\n    // check we're inserting in a previously empty subtree\n    let zero_subtree_root = hash([0, 0], 2);\n    assert_merkle_inclusion(\n        in_commitment_root,\n        out_subtree_root_path,\n        out_subtree_root_direction_selector,\n        zero_subtree_root,\n        \"Missing commitments from old tree in new tree\",\n    );\n\n    // check newly inserted commitments belong to out_root\n    let new_subtree_root = hash([out_sender_commitment, out_receiver_commitment], 2);\n    assert_merkle_inclusion(\n        out_root,\n        out_subtree_root_path,\n        out_subtree_root_direction_selector,\n        new_subtree_root,\n        \"New commits not included in new root\",\n    );\n}\n\n// #[test]\n// fn test_allowed_transfer() {\n//     // generate amounts\n//     let in_commitment_value = 10;\n//     let out_receiver_commitment_value = 2;\n//     let out_sender_commitment_value = 8;\n\n//     // account details\n//     let sender_private_key = 1;\n//     let sender_account = account(sender_private_key);\n\n//     // generate commitment\n//     let in_commitment_bliding = 2;\n//     let in_commitment = commitment(sender_account, in_commitment_value, in_commitment_bliding);\n//     let in_commitment_spending_tracker = commitment_tracker(in_commitment, in_commitment_bliding);\n\n//     // output commitment generation\n//     let receiver_account = account(100);\n//     let out_sender_commitment_bliding = 3;\n//     let out_receiver_commitment_bliding = 3;\n//     let out_receiver_commitment =\n//         commitment(receiver_account, out_receiver_commitment_value, out_receiver_commitment_bliding);\n//     let out_sender_commitment = commitment(sender_account, out_sender_commitment_value, out_sender_commitment_bliding);\n\n//     // old tree\n//     let old_first_level_l = hash([in_commitment, 1], 2);\n//     let old_first_level_r = hash([0, 0], 2);\n//     let in_commitment_root = hash([old_first_level_l, old_first_level_r], 2);\n\n//     // new tree\n//     let new_first_level_l = hash([in_commitment, 1], 2);\n//     let new_first_level_r = hash([out_sender_commitment, out_receiver_commitment], 2);\n//     let out_root = hash([new_first_level_l, new_first_level_r], 2);\n\n//     // nullifier\n//     let in_commitment_path = [1, old_first_level_r];\n//     let in_commitment_direction_selector = [false, false];\n\n//     main(\n//         sender_private_key,\n//         receiver_account,\n//         in_commitment_root,\n//         in_commitment_path,\n//         in_commitment_direction_selector,\n//         in_commitment_value,\n//         in_commitment_bliding,\n//         in_commitment_spending_tracker,\n//         out_receiver_commitment_value,\n//         out_receiver_commitment_bliding,\n//         out_receiver_commitment,\n//         out_sender_commitment_value,\n//         out_sender_commitment_bliding,\n//         out_sender_commitment,\n//         out_root,\n//         [new_first_level_l],\n//         [true],\n//     );\n// }\n\n// #[test(should_fail_with = \"Invalid UTXO amounts\")]\n// fn test_invalid_utxo_amounts() {\n//     // generate amounts\n//     let in_commitment_value = 10;\n//     let out_receiver_commitment_value = 2;\n//     let out_sender_commitment_value = 8000; // // <-------------------------------------------- out more than it should\n\n//     // account details\n//     let sender_private_key = 1;\n//     let sender_account = account(sender_private_key);\n\n//     // generate commitment\n//     let in_commitment_bliding = 2;\n//     let in_commitment = commitment(sender_account, in_commitment_value, in_commitment_bliding);\n//     let in_commitment_spending_tracker = commitment_tracker(in_commitment, in_commitment_bliding);\n\n//     // output commitment generation\n//     let receiver_account = account(100);\n//     let out_sender_commitment_bliding = 3;\n//     let out_receiver_commitment_bliding = 3;\n//     let out_receiver_commitment =\n//         commitment(receiver_account, out_receiver_commitment_value, out_receiver_commitment_bliding);\n//     let out_sender_commitment = commitment(sender_account, out_sender_commitment_value, out_sender_commitment_bliding);\n\n//     // old tree\n//     let old_first_level_l = hash([in_commitment, 1], 2);\n//     let old_first_level_r = hash([0, 0], 2);\n//     let in_commitment_root = hash([old_first_level_l, old_first_level_r], 2);\n\n//     // new tree\n//     let new_first_level_l = hash([in_commitment, 1], 2);\n//     let new_first_level_r = hash([out_sender_commitment, out_receiver_commitment], 2);\n//     let out_root = hash([new_first_level_l, new_first_level_r], 2);\n\n//     // nullifier\n//     let in_commitment_path = [1, old_first_level_r];\n//     let in_commitment_direction_selector = [false, false];\n\n//     main(\n//         sender_private_key,\n//         receiver_account,\n//         in_commitment_root,\n//         in_commitment_path,\n//         in_commitment_direction_selector,\n//         in_commitment_value,\n//         in_commitment_bliding,\n//         in_commitment_spending_tracker,\n//         out_receiver_commitment_value,\n//         out_receiver_commitment_bliding,\n//         out_receiver_commitment,\n//         out_sender_commitment_value,\n//         out_sender_commitment_bliding,\n//         out_sender_commitment,\n//         out_root,\n//         [new_first_level_l],\n//         [true],\n//     );\n// }\n\n// #[test(should_fail)]\n// fn test_unlinked_root() {\n//     // generate amounts\n//     let in_commitment_value = 10;\n//     let out_receiver_commitment_value = 2;\n//     let out_sender_commitment_value = 8000; // Notice here\n\n//     // account details\n//     let sender_private_key = 1;\n//     let sender_account = account(sender_private_key);\n\n//     // generate commitment\n//     let in_commitment_bliding = 2;\n//     let in_commitment = commitment(sender_account, in_commitment_value, in_commitment_bliding);\n//     let in_commitment_spending_tracker = commitment_tracker(in_commitment, in_commitment_bliding);\n\n//     // output commitment generation\n//     let receiver_account = account(100);\n//     let out_sender_commitment_bliding = 3;\n//     let out_receiver_commitment_bliding = 3;\n//     let out_receiver_commitment =\n//         commitment(receiver_account, out_receiver_commitment_value, out_receiver_commitment_bliding);\n//     let out_sender_commitment = commitment(sender_account, out_sender_commitment_value, out_sender_commitment_bliding);\n\n//     // old tree\n//     let old_first_level_l = hash([in_commitment, 1], 2);\n//     let old_first_level_r = hash([0, 0], 2);\n//     let in_commitment_root = hash([old_first_level_l, old_first_level_r], 2);\n\n//     // new tree\n//     let new_first_level_l = hash([100000, 1], 2); // <-------------------------------------------- Removed in commitment\n//     let new_first_level_r = hash([out_sender_commitment, out_receiver_commitment], 2);\n//     let out_root = hash([new_first_level_l, new_first_level_r], 2);\n\n//     // nullifier\n//     let in_commitment_path = [1, old_first_level_r];\n//     let in_commitment_direction_selector = [false, false];\n\n//     main(\n//         sender_private_key,\n//         receiver_account,\n//         in_commitment_root,\n//         in_commitment_path,\n//         in_commitment_direction_selector,\n//         in_commitment_value,\n//         in_commitment_bliding,\n//         in_commitment_spending_tracker,\n//         out_receiver_commitment_value,\n//         out_receiver_commitment_bliding,\n//         out_receiver_commitment,\n//         out_sender_commitment_value,\n//         out_sender_commitment_bliding,\n//         out_sender_commitment,\n//         out_root,\n//         [new_first_level_l],\n//         [true],\n//     );\n// }\n\n// #[test(should_fail)]\n// fn test_missing_new_commits() {\n//     // generate amounts\n//     let in_commitment_value = 10;\n//     let out_receiver_commitment_value = 2;\n//     let out_sender_commitment_value = 8000; // Notice here\n\n//     // account details\n//     let sender_private_key = 1;\n//     let sender_account = account(sender_private_key);\n\n//     // generate commitment\n//     let in_commitment_bliding = 2;\n//     let in_commitment = commitment(sender_account, in_commitment_value, in_commitment_bliding);\n//     let in_commitment_spending_tracker = commitment_tracker(in_commitment, in_commitment_bliding);\n\n//     // output commitment generation\n//     let receiver_account = account(100);\n//     let out_sender_commitment_bliding = 3;\n//     let out_receiver_commitment_bliding = 3;\n//     let out_receiver_commitment =\n//         commitment(receiver_account, out_receiver_commitment_value, out_receiver_commitment_bliding);\n//     let out_sender_commitment = commitment(sender_account, out_sender_commitment_value, out_sender_commitment_bliding);\n\n//     // old tree\n//     let old_first_level_l = hash([in_commitment, 1], 2);\n//     let old_first_level_r = hash([0, 0], 2);\n//     let in_commitment_root = hash([old_first_level_l, old_first_level_r], 2);\n\n//     // new tree\n//     let new_first_level_l = hash([in_commitment, 1], 2);\n//     let new_first_level_r = hash([0, 0], 2); // <-------------------------------------------- Missing new commitments\n//     let out_root = hash([new_first_level_l, new_first_level_r], 2);\n\n//     // nullifier\n//     let in_commitment_path = [1, old_first_level_r];\n//     let in_commitment_direction_selector = [false, false];\n\n//     main(\n//         sender_private_key,\n//         receiver_account,\n//         in_commitment_root,\n//         in_commitment_path,\n//         in_commitment_direction_selector,\n//         in_commitment_value,\n//         in_commitment_bliding,\n//         in_commitment_spending_tracker,\n//         out_receiver_commitment_value,\n//         out_receiver_commitment_bliding,\n//         out_receiver_commitment,\n//         out_sender_commitment_value,\n//         out_sender_commitment_bliding,\n//         out_sender_commitment,\n//         out_root,\n//         [new_first_level_l],\n//         [true],\n//     );\n// }\n","path":"/Users/matzapata/git-work/starkware/starkware-private-erc20/packages/circuits/transfer/src/main.nr"},"64":{"source":"use std::hash::poseidon2::Poseidon2::hash;\n\n// account = hash(private_key) \npub fn account(private_key: Field) -> Field {\n    hash([private_key], 1)\n}\n\n// commitment = hash(owner, bliding, amount) // bliding = random number that makes commitment unique\npub fn commitment(owner: Field, value: Field, bliding: Field) -> Field {\n    hash([owner, value, bliding], 3)\n}\n\n// commitment_tracker = hash(commitment, bliding) // same bliding as for commitment\npub fn commitment_tracker(commitment: Field, bliding: Field) -> Field {\n    hash([commitment, bliding], 2)\n}\n\n// allowance_hash = hash(owner, spender, value)\npub fn allowance_hash(owner: Field, spender: Field, value: Field) -> Field {\n    hash([owner, spender, value], 3)\n}\n\n// allowance_relationship = hash(owner, spender)\npub fn allowance_relationship(owner: Field, spender: Field) -> Field {\n    hash([owner, spender], 2)\n}\n","path":"/Users/matzapata/git-work/starkware/starkware-private-erc20/packages/circuits/common/src/definitions.nr"},"65":{"source":"use std::hash::poseidon2::Poseidon2::hash;\n\npub fn assert_merkle_inclusion<let N: u32>(\n    root: Field,\n    path: [Field],\n    direction_selector: [bool],\n    leaf: Field,\n    failure_message: str<N>\n) {\n    assert(path.len() == direction_selector.len());\n    \n    let mut digest = leaf;\n    for i in 0..path.len() {\n        let (left, right) = if direction_selector[i] {\n            (path[i], digest)\n        } else {\n            (digest, path[i])\n        };\n\n        digest = hash([left, right], 2);\n    }\n\n    assert(digest == root, failure_message);\n}\n\npub fn find_leaf_index(direction_selector: [bool]) -> Field {\n    let mut index: u32 = 0;\n    let depth = direction_selector.len();\n\n    for i in 0..depth {\n        let pos = depth - 1 - i;\n        index = index * 2;\n        if direction_selector[pos] {\n            index = index + 1;\n        }\n    }\n    index as Field\n}\n\n// assert merkle inclusion tests\n\n#[test]\nfn should_be_included() {\n    let first_level_l = hash([hash([1], 1), hash([0], 1)], 2);\n    let first_level_r = hash([hash([0], 1), hash([0], 1)], 2);\n    let root = hash([first_level_l, first_level_r], 2);\n\n    let path: [Field; 2] = [ hash([0], 1), first_level_r ];\n    let direction_selector: [bool; 2] = [ false, false ];\n\n    assert_merkle_inclusion(root, path, direction_selector, hash([1], 1), \"Failed\");\n}\n\n\n#[test(should_fail_with=\"Failed\")]\nfn should_not_included() {\n    let first_level_l = hash([hash([1], 1), hash([0], 1)], 2);\n    let first_level_r = hash([hash([0], 1), hash([0], 1)], 2);\n    let root = hash([first_level_l, first_level_r], 2);\n\n    let path: [Field; 2] = [ hash([0], 1), first_level_r ];\n    let direction_selector: [bool; 2] = [ false, false ];\n\n    assert_merkle_inclusion(root, path, direction_selector, hash([100], 1), \"Failed\");\n}\n\n// generate index tests\n\n#[test]\nfn test_generate_index_case1() {\n    let directions: [bool; 2] = [true, false];\n    let index = find_leaf_index(directions);\n    assert(index == 1);\n}\n\n#[test]\nfn test_generate_index_case2() {\n    let directions: [bool; 2] = [false, true];\n    let index = find_leaf_index(directions);\n    assert(index == 2);\n}","path":"/Users/matzapata/git-work/starkware/starkware-private-erc20/packages/circuits/common/src/merkle_tree.nr"}},"names":["main"],"brillig_names":[]}